<h1>About</h1>
<p><a href="https://github.com/mdecycu/cmsite"> https://github.com/mdecycu/cmsite</a></p>
<p></p>
<p></p>
<h1>w1</h1>
<p>上了大學，首次與程式相關的課程碰面了，老實說我還是有些忐忑，畢竟在高中時期似乎知有稍微接觸過C++語言，然而我也忘得差不多了，希望這次能夠學到更多的東西。</p>
<h1>w2~w3</h1>
<p>上課時間，老師教導我們建立github、replite的帳戶並說明了這些平台的便利性及基本功能，在後來，又說明了如何設定網路，確認是否正確連網，老實說我那時有聽沒有懂，也沒有那個膽識發問，便只能默默的聽著，而再聽見老師說這門課程可透過chatGPT來協助解決問題時，我有了些信心，雖然那東西不一定都對就是了。</p>
<p>網路設定</p>
<p></p>
<p><video controls="controls" height="250" width="400">
<source src="/images/Network settings.mp4" type="video/mp4"/></video></p>
<h1>w4</h1>
<p>這周開始，我們先被要求驗到一個網站中建立考試用的帳戶，在這過程中，班上的同學烏龍百出，像是將姓名的位置顛倒，或是忘記自己設定的密碼等，但還好我都沒這些問題。然而在這周，我們還需要在github中建立一個個人的倉儲，用於日後的評分及作業繳交使用。到這裡似乎都並不難，至少我還沒出現太多的卡關。</p>
<p></p>
<p></p>
<h1>w5</h1>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件{ pkgs }: 
// https://blog.csdn.net/weixin_38468077/article/details/101069365
// http://www.gnuplot.info/demo/
// https://github.com/sysprog21/rv32emu
// https://github.com/sysprog21/semu 
// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3
// https://cs61c.org/fa23/
// https://greenteapress.com/wp/think-python-2e/
// https://github.com/ecalvadi/c99-examples
// https://github.com/gouravthakur39/beginners-C-program-examples
// https://github.com/ergenekonyigit/Numerical-Analysis-Examples
// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf
// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf
// https://jsommers.github.io/cbook/cbook.pdf
// https://jsommers.github.io/cbook/index.html
// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf
// http://cslibrary.stanford.edu/101/EssentialC.pdf
// https://publications.gbdirect.co.uk/c_book/
// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf
// ***** execute on replit 
// cd downloads
// cc gnuplot_ex1.c -o gnuplot_ex1
// ./gnuplot_ex1
#include &lt;stdio.h&gt;

// 主函式
int main() {
    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal png font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/gnuplot_ex1.png'\n");
    fprintf(gnuplotPipe, "plot sin(x)");
    // Close popen
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p>clear</p>
<p>cd downloads</p>
<p>cc gunplot_ex1.c</p>
<p>./a.out</p>
<p><img caption="false" height="200" src="/images/gnuplot_ex1.png" width="400"/></p>
<p>老實說有點麻煩，我還真的不是很熟這部分，第一次看著影片做就做了快一小時，實在是非常難受。</p>
<p></p>
<p><video controls="controls" height="250" width="400">
<source src="/images/w4_w5.mp4" type="video/mp4"/></video></p>
<p><br/><br/></p>
<h1>w6</h1>
<p>台灣國旗</p>
<p><img alt="" height="400" src="/images/roc_flag.png" width="599"/></p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// cc roc_flag.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    int sun_radius = (int)(width/8);
    // Colors for the flag
    red = gdImageColorAllocate(img, 242, 0, 0); // Red color
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue
    // red rectangle area
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // blue rectangle area
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 目前僅畫出青天白日的輪廓直線, 請嘗試計算所需的點座標完成國旗繪圖
    draw_white_sun(img, center_x, center_y, sun_radius, white);
}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    float angle = 0;
    int fromX, fromY;
    int toX, toY;
    for (int i=0; i&lt;24; i++){
        angle += 5*M_PI*2/12;
        //printf("%.3f", angle);
        toX = center_x + cos(angle)*sun_radius;
        toY = center_y + sin(angle)*sun_radius;
        // 只有 i 為 0 時移動到 toX, toY, 其餘都進行直線繪圖
        if (i!=0){
            gdImageLine(img, fromX, fromY, toX, toY, color);
        }
        fromX = toX;
        fromY = toY;
   }
}</pre>
<p>美國國旗</p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_United_States
// https://www.britannica.com/topic/flag-of-the-United-States-of-America
// 以下為幾乎要繪製完成的美國國旗, 請修改下列原始碼, 令其繪出正確的美國國旗
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // Colors for the flag
    red = gdImageColorAllocate(img, 178, 34, 52); // Red stripes
    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes
    blue = gdImageColorAllocate(img, 60, 59, 110); // Blue field

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // Corrected star size (half the original size)

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.063 * height); // Horizontal spacing between stars
    int star_spacing_y = (int)(0.054 * height); // Vertical spacing between stars
    int star_start_x = (int)(0.0616 * height); // Starting X position for stars
    int star_start_y = (int)(0.0485 * height); // Starting Y position for stars

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x;
            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // Fill the star with white color
    gdImageFilledPolygon(img, points, 10, color);
}
</pre>
<p><img caption="false" height="320" src="/images/usa_flag.png" width="400"/></p>
<p>台灣</p>
<p><img alt="" height="250" src="/images/roc_flag_in_gd.png" width="375"/></p>
<pre class="brush:cpp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library
// https://www.rapidtables.com/web/color/RGB_Color.html
// 幾何形狀著色與繪圖練習
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖
#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);

int main() {
    // width 3: height 2
    int width = 1200;
    // 國旗長寬比為 3:2
    int height = (int)(width*2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("./../images/roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處
    int center_x = (int)(width/4);
    int center_y = (int)(height/4);
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖
    // 由於中央白日圓形的半徑為青天寬度的 1/8
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8
    int sun_radius = (int)(width/8);
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑
    int white_circle_dia = sun_radius;
    // 中央藍色圓形半徑為中央白日的 1又 2/15
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色
    // 根據畫布大小塗上紅色長方形區域
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);
    // 先設法以填色畫出六個白色堆疊菱形
    draw_white_sun(img, center_x, center_y, sun_radius, white);
    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

}

void draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int color) {
    // M_PI 大小定義於 math.h 標頭檔中, 因為三角函數中採用徑度為角度單位
    // 因此定義將角度轉為徑度的轉換變數為 deg, 角度值乘上 deg 就可轉為徑度
    float deg = M_PI/180;
    // 根據十二道光芒的每一尖角的角度為 15 度, 求出其對應直角三角形的另一角度為 75 度
    // 求出十二道光芒中任一菱形的 small radius, 也就是菱形的另一個對應小圓的半徑大小
    float sr = sun_radius/tan(75*deg);
    int ax, ay, bx, by, dx, dy, ex, ey;
    gdPoint points[4];
    /* 在塗上十二道光芒中的單一菱形區域之前, 先以座標點畫線測試是否正確
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // AB
    gdImageLine(img, ax, ay, bx, by, color);
    // BE
    gdImageLine(img, bx, by, ex, ey, color);
    // ED
    gdImageLine(img, ex, ey, dx, dy, color);
    // DA
    gdImageLine(img, dx, dy, ax, ay, color);
    */
    ax = center_x;
    ay = center_y - sun_radius;
    bx = center_x - sun_radius*tan(15*deg);
    by = center_y;
    ex = center_x;
    ey = center_y + sun_radius;
    dx = center_x + sun_radius*tan(15*deg);
    dy = center_y;
    // 確定單一菱形區域的塗色正確後, 利用迴圈每次轉動 30 度, 總共轉六次即可塗上十二道光芒區域
    for (int i=1;i&lt;=6;i++){
    // A
    points[0].x = ax+sun_radius*sin(30*deg*i);
    points[0].y = ay+sun_radius-sun_radius*cos(30*deg*i);
    // B
    points[1].x = bx+sr-sr*cos(30*deg*i);
    points[1].y = by-sr*sin(30*deg*i);
    // E
    points[2].x = ex-sun_radius*sin(30*deg*i);
    points[2].y = ey-(sun_radius-sun_radius*cos(30*deg*i));
    // D
    points[3].x = dx-(sr-sr*cos(30*deg*i));
    points[3].y = dy+sr*sin(30*deg*i);
    // 對菱形區域範圍塗色
    gdImageFilledPolygon(img, points, 4, color);
    // 在菱形區域外圍畫線, 明確界定菱形範圍
    gdImagePolygon(img, points, 4, color);
    }
}</pre>
<h1>w7</h1>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;gdfonts.h&gt;

void drawJapaneseFlag() {
    int flagWidth = 300;
    int flagHeight = 200;

    gdImagePtr img;
    FILE *pngout;

    img = gdImageCreateTrueColor(flagWidth, flagHeight);

    // 設置白色背景
    int white = gdImageColorAllocate(img, 255, 255, 255);
    gdImageFill(img, 0, 0, white);

    // 設置紅色
    int red = gdImageColorAllocate(img, 255, 0, 0);

    // 繪製紅色圓圈
    int circleRadius = 50;
    int circleCenterX = flagWidth / 2;
    int circleCenterY = flagHeight / 2;

    gdImageFilledEllipse(img, circleCenterX, circleCenterY, circleRadius * 2, circleRadius * 2, red);

    // 輸出 PNG 文件
    pngout = fopen("japanese_flag.png", "wb");
    gdImagePng(img, pngout);

    // 釋放內存
    gdImageDestroy(img);
    fclose(pngout);
}

int main() {
    drawJapaneseFlag();
    return 0;
}</pre>
<p><img alt="" height="250" src="/images/下載.png" width="375"/></p>
<p>日本國旗</p>
<p>美國國旗</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_usa_flag(gdImagePtr img);
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

int main() {
    int width = 800;
    int height = (int)(width / 1.9);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_usa_flag(img);

    FILE *outputFile = fopen("./../images/usa_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);

    return 0;
}

void draw_usa_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    // 国旗颜色
    red = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹
    blue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形

    int stripe_height = height / 13;
    int stripe_width = width;
    int star_size = (int)(0.0308 * height); // 星星大小

    for (int y = 0; y &lt; height; y += stripe_height) {
        if (y / stripe_height % 2 == 0) {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);
        } else {
            gdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);
        }
    }

    gdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);

    int star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距
    int star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距
    int star_start_x = (int)(0.125 * height); // 星星的起始X位置
    int star_start_y = (int)(0.0485 * height); // 星星的起始Y位置

    for (int row = 0; row &lt; 9; row++) {
        int starsPerRow = (row % 2 == 0) ? 6 : 5;

        // 计算2、4、6和8排星星的偏移量
        int offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;

        for (int star = 0; star &lt; starsPerRow; star++) {
            int x = star_start_x + star * star_spacing_x + offset_x;

            // 旋转角度（以弧度为单位）
            double rotation_angle = M_PI / 5; // 忘記多少度的旋转

            int y = star_start_y + row * star_spacing_y;
            draw_star(img, x, y, star_size, white, rotation_angle);
        }
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    for (int i = 0; i &lt; 10; i++) {
        double angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;
        int radius = (i % 2 == 0) ? size : size / 2;
        points[i].x = x + radius * cos(angle);
        points[i].y = y + radius * sin(angle);
    }

    // 用指定的颜色填充星星
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="250" src="/images/usa_flag.png" width="474"/></p>
<p><img alt="" height="250" src="/images/output.png" width="375"/></p>
<p>韓國</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;gd.h&gt;
#include &lt;stdio.h&gt;
#include &lt;math.h&gt;

int main() {
    gdImagePtr im;
    FILE *output;
    int white, red, blue, black;

    im = gdImageCreateTrueColor(600, 400);
    white = gdImageColorAllocate(im, 255, 255, 255);
    red = gdImageColorAllocate(im, 225, 0, 0);
    blue = gdImageColorAllocate(im, 0, 0, 225);
    black = gdImageColorAllocate(im, 0, 0, 0);

    // 填充白色背景
    gdImageFilledRectangle(im, 0, 0, 599, 399, white);

    // 在中間添加紅藍各一半的圓，將紅色移到上方，藍色移到下方
    int centerX = 300;
    int centerY = 200;
    int radius = 200;

    gdImageFilledArc(im, centerX, centerY, radius, radius, 0, 180, blue, gdPie);
    gdImageFilledArc(im, centerX, centerY - 1, radius, radius, 180, 360, red, gdPie);

    // 在中間添加向右偏移49的直徑為100的藍色圓
    int blueCircleRadius = 50; // 半徑為50
    int offsetX = 49;
    gdImageFilledEllipse(im, centerX + offsetX, centerY, blueCircleRadius * 2, blueCircleRadius * 2, blue);

    // 在中間添加向左偏移50的直徑為100的紅色圓
    int redCircleRadius = 50; // 半徑為50
    gdImageFilledEllipse(im, centerX - 49, centerY, redCircleRadius * 2, redCircleRadius * 2, red);

    // 將中間的圖形順時針旋轉104度
    double angle = 104.0;
    gdImagePtr rotated_im = gdImageCreateTrueColor(600, 400);
    gdImageFilledRectangle(rotated_im, 0, 0, 599, 399, white);

    // 複製原始圖像
    gdImageCopy(rotated_im, im, 0, 0, 0, 0, 600, 400);

    // 逆時針旋轉的角度
    double rotationAngle = 25.0; 

    // 繪製斜直的長方形
    int rectWidth = 15;   // 長方形寬度
    int rectHeight = 120;  // 長方形高度
    int rectSpacing = 10;  // 長方形間隔

    // 計算三個長方形的左上角座標
    int rect1X = 139 - rectWidth - rectSpacing;  // 第一個長方形
    int rect1Y = 206 - rectHeight / 2;
    int rect2X = rect1X - rectWidth - rectSpacing;  // 第二個長方形
    int rect2Y = rect1Y;
    int rect3X = rect2X - rectWidth - rectSpacing;  // 第三個長方形
    int rect3Y = rect1Y;

    gdPoint points1[4];
    points1[0].x = (int)(rect1X - centerX) * cos(rotationAngle * M_PI / 180) - (rect1Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points1[0].y = (int)(rect1X - centerX) * sin(rotationAngle * M_PI / 180) + (rect1Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
    points1[1].x = (int)((rect1X + rectWidth) - centerX) * cos(rotationAngle * M_PI / 180) - (rect1Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points1[1].y = (int)((rect1X + rectWidth) - centerX) * sin(rotationAngle * M_PI / 180) + (rect1Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
    points1[2].x = (int)((rect1X + rectWidth) - centerX) * cos(rotationAngle * M_PI / 180) - ((rect1Y + rectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points1[2].y = (int)((rect1X + rectWidth) - centerX) * sin(rotationAngle * M_PI / 180) + ((rect1Y + rectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
    points1[3].x = (int)(rect1X - centerX) * cos(rotationAngle * M_PI / 180) - ((rect1Y + rectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points1[3].y = (int)(rect1X - centerX) * sin(rotationAngle * M_PI / 180) + ((rect1Y + rectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

    gdPoint points2[4];
    points2[0].x = (int)(rect2X - centerX) * cos(rotationAngle * M_PI / 180) - (rect2Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points2[0].y = (int)(rect2X - centerX) * sin(rotationAngle * M_PI / 180) + (rect2Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
    points2[1].x = (int)((rect2X + rectWidth) - centerX) * cos(rotationAngle * M_PI / 180) - (rect2Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points2[1].y = (int)((rect2X + rectWidth) - centerX) * sin(rotationAngle * M_PI / 180) + (rect2Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
    points2[2].x = (int)((rect2X + rectWidth) - centerX) * cos(rotationAngle * M_PI / 180) - ((rect2Y + rectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points2[2].y = (int)((rect2X + rectWidth) - centerX) * sin(rotationAngle * M_PI / 180) + ((rect2Y + rectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
    points2[3].x = (int)(rect2X - centerX) * cos(rotationAngle * M_PI / 180) - ((rect2Y + rectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points2[3].y = (int)(rect2X - centerX) * sin(rotationAngle * M_PI / 180) + ((rect2Y + rectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

    gdPoint points3[4];
    points3[0].x = (int)(rect3X - centerX) * cos(rotationAngle * M_PI / 180) - (rect3Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points3[0].y = (int)(rect3X - centerX) * sin(rotationAngle * M_PI / 180) + (rect3Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
    points3[1].x = (int)((rect3X + rectWidth) - centerX) * cos(rotationAngle * M_PI / 180) - (rect3Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points3[1].y = (int)((rect3X + rectWidth) - centerX) * sin(rotationAngle * M_PI / 180) + (rect3Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
    points3[2].x = (int)((rect3X + rectWidth) - centerX) * cos(rotationAngle * M_PI / 180) - ((rect3Y + rectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points3[2].y = (int)((rect3X + rectWidth) - centerX) * sin(rotationAngle * M_PI / 180) + ((rect3Y + rectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
    points3[3].x = (int)(rect3X - centerX) * cos(rotationAngle * M_PI / 180) - ((rect3Y + rectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
    points3[3].y = (int)(rect3X - centerX) * sin(rotationAngle * M_PI / 180) + ((rect3Y + rectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

    gdImageFilledPolygon(rotated_im, points1, 4, black);
    gdImageFilledPolygon(rotated_im, points2, 4, black);
    gdImageFilledPolygon(rotated_im, points3, 4, black);


  {// 添加新的黑色斜形
  gdPoint rect4Points[4];
  int rect4X = 70;  // 第四個長方形
  int rect4Y = 185;
  rect4Points[0].x = (int)(rect4X - centerX) * cos(rotationAngle * M_PI / 180) + (rect4Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4Points[0].y = (int)(rect4X - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect4Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  int rect4Width = rectWidth;  // 假設 rectWidth 已經定義
  int rect4Height = rectHeight;  // 假設 rectHeight 已經定義
  rect4Points[1].x = (int)((rect4X + rect4Width) - centerX) * cos(rotationAngle * M_PI / 180) + (rect4Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4Points[1].y = (int)((rect4X + rect4Width) - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect4Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4Points[2].x = (int)((rect4X + rect4Width) - centerX) * cos(rotationAngle * M_PI / 180) + ((rect4Y + rect4Height) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4Points[2].y = (int)((rect4X + rect4Width) - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect4Y + rect4Height) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4Points[3].x = (int)(rect4X - centerX) * cos(rotationAngle * M_PI / 180) + ((rect4Y + rect4Height) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4Points[3].y = (int)(rect4X - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect4Y + rect4Height) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect4Points, 4, black);

  // 修改第五個斜形
  gdPoint rect5Points[4];
  int rect5X = rect4X + rect4Width + rectSpacing;  // 第五個長方形
  int rect5Y = rect4Y;
  int middleRectWidth = 15;    // 中間長方形寬度
  int middleRectHeight = 55;   // 中間長方形高度
  int middleRectSpacing = 10;  // 中間長方形上下間隔
  rect5Points[0].x = (int)(rect5X - centerX) * cos(rotationAngle * M_PI / 180) + (rect5Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[0].y = (int)(rect5X - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect5Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect5Points[1].x = (int)((rect5X + middleRectWidth) - centerX) * cos(rotationAngle * M_PI / 180) + (rect5Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[1].y = (int)((rect5X + middleRectWidth) - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect5Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect5Points[2].x = (int)((rect5X + middleRectWidth) - centerX) * cos(rotationAngle * M_PI / 180) + ((rect5Y + middleRectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[2].y = (int)((rect5X + middleRectWidth) - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect5Y + middleRectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect5Points[3].x = (int)(rect5X - centerX) * cos(rotationAngle * M_PI / 180) + ((rect5Y + middleRectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[3].y = (int)(rect5X - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect5Y + middleRectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect5Points, 4, black);

  // 添加位於第五個斜形下方的新的黑色斜形
  gdPoint rectBelow5Points[4];
  int rectBelow5X = rect5X;
  int rectBelow5Y = rect5Y + middleRectHeight + middleRectSpacing;
  rectBelow5Points[0].x = (int)(rectBelow5X - centerX) * cos(rotationAngle * M_PI / 180) + (rectBelow5Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rectBelow5Points[0].y = (int)(rectBelow5X - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rectBelow5Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rectBelow5Points[1].x = (int)((rectBelow5X + middleRectWidth) - centerX) * cos(rotationAngle * M_PI / 180) + (rectBelow5Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rectBelow5Points[1].y = (int)((rectBelow5X + middleRectWidth) - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rectBelow5Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rectBelow5Points[2].x = (int)((rectBelow5X + middleRectWidth) - centerX) * cos(rotationAngle * M_PI / 180) + ((rectBelow5Y + middleRectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rectBelow5Points[2].y = (int)((rectBelow5X + middleRectWidth) - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rectBelow5Y + middleRectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rectBelow5Points[3].x = (int)(rectBelow5X - centerX) * cos(rotationAngle * M_PI / 180) + ((rectBelow5Y + middleRectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rectBelow5Points[3].y = (int)(rectBelow5X - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rectBelow5Y + middleRectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rectBelow5Points, 4, black);

  // 添加新的黑色斜形
  gdPoint rect6Points[4];
  int rect6X = rect5X + middleRectWidth + rectSpacing;  // 第六個長方形
  int rect6Y = rect4Y;
  rect6Points[0].x = (int)(rect6X - centerX) * cos(rotationAngle * M_PI / 180) + (rect6Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6Points[0].y = (int)(rect6X - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect6Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  int rect6Width = rectWidth;  // 假設 rectWidth 已經定義
  int rect6Height = rectHeight;  // 假設 rectHeight 已經定義
  rect6Points[1].x = (int)((rect6X + rect6Width) - centerX) * cos(rotationAngle * M_PI / 180) + (rect6Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6Points[1].y = (int)((rect6X + rect6Width) - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect6Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6Points[2].x = (int)((rect6X + rect6Width) - centerX) * cos(rotationAngle * M_PI / 180) + ((rect6Y + rect6Height) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6Points[2].y = (int)((rect6X + rect6Width) - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect6Y + rect6Height) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6Points[3].x = (int)(rect6X - centerX) * cos(rotationAngle * M_PI / 180) + ((rect6Y + rect6Height) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6Points[3].y = (int)(rect6X - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect6Y + rect6Height) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect6Points, 4, black);}

  {// 添加新的黑色斜形（第四個，上半部分）
  gdPoint rect4aPoints[4];
  int rect4aX = 460;  // 第四個長方形（上半部分）
  int rect4aY = 139;
  rect4aPoints[0].x = (int)(rect4aX - centerX) * cos(rotationAngle * M_PI / 180) + (rect4aY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4aPoints[0].y = (int)(rect4aX - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect4aY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4aPoints[1].x = (int)((rect4aX + 15) - centerX) * cos(rotationAngle * M_PI / 180) + (rect4aY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4aPoints[1].y = (int)((rect4aX + 15) - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect4aY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4aPoints[2].x = (int)((rect4aX + 15) - centerX) * cos(rotationAngle * M_PI / 180) + ((rect4aY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4aPoints[2].y = (int)((rect4aX + 15) - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect4aY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4aPoints[3].x = (int)(rect4aX - centerX) * cos(rotationAngle * M_PI / 180) + ((rect4aY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4aPoints[3].y = (int)(rect4aX - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect4aY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect4aPoints, 4, black);

  // 添加新的黑色斜形（第四個，下半部分）
  gdPoint rect4bPoints[4];
  int rect4bX = 460;  // 第四個長方形（下半部分）
  int rect4bY = 139 + 55 + 10;  // 上半部分的 Y 座標 + 上半部分的高度 + 間隔
  rect4bPoints[0].x = (int)(rect4bX - centerX) * cos(rotationAngle * M_PI / 180) + (rect4bY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4bPoints[0].y = (int)(rect4bX - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect4bY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4bPoints[1].x = (int)((rect4bX + 15) - centerX) * cos(rotationAngle * M_PI / 180) + (rect4bY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4bPoints[1].y = (int)((rect4bX + 15) - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect4bY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4bPoints[2].x = (int)((rect4bX + 15) - centerX) * cos(rotationAngle * M_PI / 180) + ((rect4bY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4bPoints[2].y = (int)((rect4bX + 15) - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect4bY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4bPoints[3].x = (int)(rect4bX - centerX) * cos(rotationAngle * M_PI / 180) + ((rect4bY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4bPoints[3].y = (int)(rect4bX - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect4bY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect4bPoints, 4, black);

  // 修改第五個斜形（長度為 120）
  gdPoint rect5Points[4];
  int rect5X = rect4aX + 15 + rectSpacing;  // 第五個長方形
  int rect5Y = rect4aY;
  rect5Points[0].x = (int)(rect5X - centerX) * cos(rotationAngle * M_PI / 180) + (rect5Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[0].y = (int)(rect5X - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect5Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect5Points[1].x = (int)((rect5X + 15) - centerX) * cos(rotationAngle * M_PI / 180) + (rect5Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[1].y = (int)((rect5X + 15) - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect5Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect5Points[2].x = (int)((rect5X + 15) - centerX) * cos(rotationAngle * M_PI / 180) + ((rect5Y + 120) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[2].y = (int)((rect5X + 15) - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect5Y + 120) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect5Points[3].x = (int)(rect5X - centerX) * cos(rotationAngle * M_PI / 180) + ((rect5Y + 120) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[3].y = (int)(rect5X - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect5Y + 120) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect5Points, 4, black);

  // 添加新的黑色斜形（第六個，上半部分）
  gdPoint rect6aPoints[4];
  int rect6aX = rect5X + 15 + rectSpacing;  // 第六個長方形（上半部分）
  int rect6aY = rect5Y;
  rect6aPoints[0].x = (int)(rect6aX - centerX) * cos(rotationAngle * M_PI / 180) + (rect6aY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6aPoints[0].y = (int)(rect6aX - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect6aY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6aPoints[1].x = (int)((rect6aX + 15) - centerX) * cos(rotationAngle * M_PI / 180) + (rect6aY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6aPoints[1].y = (int)((rect6aX + 15) - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect6aY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6aPoints[2].x = (int)((rect6aX + 15) - centerX) * cos(rotationAngle * M_PI / 180) + ((rect6aY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6aPoints[2].y = (int)((rect6aX + 15) - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect6aY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6aPoints[3].x = (int)(rect6aX - centerX) * cos(rotationAngle * M_PI / 180) + ((rect6aY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6aPoints[3].y = (int)(rect6aX - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect6aY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect6aPoints, 4, black);

  // 添加新的黑色斜形（第六個，下半部分）
  gdPoint rect6bPoints[4];
  int rect6bX = rect5X + 15 + rectSpacing;  // 第六個長方形（下半部分）
  int rect6bY = rect5Y + 55 + 10;  // 上半部分的 Y 座標 + 上半部分的高度 + 間隔
  rect6bPoints[0].x = (int)(rect6bX - centerX) * cos(rotationAngle * M_PI / 180) + (rect6bY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6bPoints[0].y = (int)(rect6bX - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect6bY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6bPoints[1].x = (int)((rect6bX + 15) - centerX) * cos(rotationAngle * M_PI / 180) + (rect6bY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6bPoints[1].y = (int)((rect6bX + 15) - centerX) * (-sin(rotationAngle * M_PI / 180)) + (rect6bY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6bPoints[2].x = (int)((rect6bX + 15) - centerX) * cos(rotationAngle * M_PI / 180) + ((rect6bY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6bPoints[2].y = (int)((rect6bX + 15) - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect6bY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6bPoints[3].x = (int)(rect6bX - centerX) * cos(rotationAngle * M_PI / 180) + ((rect6bY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6bPoints[3].y = (int)(rect6bX - centerX) * (-sin(rotationAngle * M_PI / 180)) + ((rect6bY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect6bPoints, 4, black);}


  // 添加新的黑色斜形（第四個，上半部分）
  gdPoint rect4aPoints[4];
  int rect4aX = 460;  // 第四個長方形（上半部分）
  int rect4aY =185;
  rect4aPoints[0].x = (int)(rect4aX - centerX) * cos(rotationAngle * M_PI / 180) - (rect4aY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4aPoints[0].y = (int)(rect4aX - centerX) * sin(rotationAngle * M_PI / 180) + (rect4aY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4aPoints[1].x = (int)((rect4aX + 15) - centerX) * cos(rotationAngle * M_PI / 180) - (rect4aY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4aPoints[1].y = (int)((rect4aX + 15) - centerX) * sin(rotationAngle * M_PI / 180) + (rect4aY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4aPoints[2].x = (int)((rect4aX + 15) - centerX) * cos(rotationAngle * M_PI / 180) - ((rect4aY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4aPoints[2].y = (int)((rect4aX + 15) - centerX) * sin(rotationAngle * M_PI / 180) + ((rect4aY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4aPoints[3].x = (int)(rect4aX - centerX) * cos(rotationAngle * M_PI / 180) - ((rect4aY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4aPoints[3].y = (int)(rect4aX - centerX) * sin(rotationAngle * M_PI / 180) + ((rect4aY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect4aPoints, 4, black);

  // 添加新的黑色斜形（第四個，下半部分）
  gdPoint rect4bPoints[4];
  int rect4bX = rect4aX;  // 使用与上半部分相同的X坐标
  int rect4bY = rect4aY + 55 + 10;  // 上半部分的 Y 座標 + 上半部分的高度 + 間隔
  rect4bPoints[0].x = (int)(rect4bX - centerX) * cos(rotationAngle * M_PI / 180) - (rect4bY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4bPoints[0].y = (int)(rect4bX - centerX) * sin(rotationAngle * M_PI / 180) + (rect4bY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4bPoints[1].x = (int)((rect4bX + 15) - centerX) * cos(rotationAngle * M_PI / 180) - (rect4bY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4bPoints[1].y = (int)((rect4bX + 15) - centerX) * sin(rotationAngle * M_PI / 180) + (rect4bY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4bPoints[2].x = (int)((rect4bX + 15) - centerX) * cos(rotationAngle * M_PI / 180) - ((rect4bY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4bPoints[2].y = (int)((rect4bX + 15) - centerX) * sin(rotationAngle * M_PI / 180) + ((rect4bY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect4bPoints[3].x = (int)(rect4bX - centerX) * cos(rotationAngle * M_PI / 180) - ((rect4bY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect4bPoints[3].y = (int)(rect4bX - centerX) * sin(rotationAngle * M_PI / 180) + ((rect4bY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect4bPoints, 4, black);

  // 修改第五個斜形（在上方添加）
  gdPoint rect5Points[4];
  int rect5X = rect4aX + 15 + rectSpacing;  // 第五個長方形
  int rect5Y = rect4aY;
  int middleRectWidth = 15;    // 中間長方形寬度
  int middleRectHeight = 55;   // 中間長方形高度
  int middleRectSpacing = 10;  // 中間長方形上下間隔
  rect5Points[0].x = (int)(rect5X - centerX) * cos(rotationAngle * M_PI / 180) - (rect5Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[0].y = (int)(rect5X - centerX) * sin(rotationAngle * M_PI / 180) + (rect5Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect5Points[1].x = (int)((rect5X + middleRectWidth) - centerX) * cos(rotationAngle * M_PI / 180) - (rect5Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[1].y = (int)((rect5X + middleRectWidth) - centerX) * sin(rotationAngle * M_PI / 180) + (rect5Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect5Points[2].x = (int)((rect5X + middleRectWidth) - centerX) * cos(rotationAngle * M_PI / 180) - ((rect5Y + middleRectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[2].y = (int)((rect5X + middleRectWidth) - centerX) * sin(rotationAngle * M_PI / 180) + ((rect5Y + middleRectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect5Points[3].x = (int)(rect5X - centerX) * cos(rotationAngle * M_PI / 180) - ((rect5Y + middleRectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect5Points[3].y = (int)(rect5X - centerX) * sin(rotationAngle * M_PI / 180) + ((rect5Y + middleRectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect5Points, 4, black);


  // 添加位於第五個斜形下方的新的黑色斜形
  gdPoint rectBelow5Points[4];
  int rectBelow5X = rect5X;
  int rectBelow5Y = rect5Y + middleRectHeight + middleRectSpacing;
  rectBelow5Points[0].x = (int)(rectBelow5X - centerX) * cos(rotationAngle * M_PI / 180) - (rectBelow5Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rectBelow5Points[0].y = (int)(rectBelow5X - centerX) * sin(rotationAngle * M_PI / 180) + (rectBelow5Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rectBelow5Points[1].x = (int)((rectBelow5X + middleRectWidth) - centerX) * cos(rotationAngle * M_PI / 180) - (rectBelow5Y - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rectBelow5Points[1].y = (int)((rectBelow5X + middleRectWidth) - centerX) * sin(rotationAngle * M_PI / 180) + (rectBelow5Y - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rectBelow5Points[2].x = (int)((rectBelow5X + middleRectWidth) - centerX) * cos(rotationAngle * M_PI / 180) - ((rectBelow5Y + middleRectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rectBelow5Points[2].y = (int)((rectBelow5X + middleRectWidth) - centerX) * sin(rotationAngle * M_PI / 180) + ((rectBelow5Y + middleRectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rectBelow5Points[3].x = (int)(rectBelow5X - centerX) * cos(rotationAngle * M_PI / 180) - ((rectBelow5Y + middleRectHeight) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rectBelow5Points[3].y = (int)(rectBelow5X - centerX) * sin(rotationAngle * M_PI / 180) + ((rectBelow5Y + middleRectHeight) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rectBelow5Points, 4, black);

  // 第六個斜形（上半部分）
  gdPoint rect6aPoints[4];
  int rect6aX = rect5X + 15 + 10;  // 第六個長方形（上半部分）
  int rect6aY = rect5Y;
  rect6aPoints[0].x = (int)(rect6aX - centerX) * cos(rotationAngle * M_PI / 180) - (rect6aY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6aPoints[0].y = (int)(rect6aX - centerX) * sin(rotationAngle * M_PI / 180) + (rect6aY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6aPoints[1].x = (int)((rect6aX + 15) - centerX) * cos(rotationAngle * M_PI / 180) - (rect6aY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6aPoints[1].y = (int)((rect6aX + 15) - centerX) * sin(rotationAngle * M_PI / 180) + (rect6aY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6aPoints[2].x = (int)((rect6aX + 15) - centerX) * cos(rotationAngle * M_PI / 180) - ((rect6aY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6aPoints[2].y = (int)((rect6aX + 15) - centerX) * sin(rotationAngle * M_PI / 180) + ((rect6aY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6aPoints[3].x = (int)(rect6aX - centerX) * cos(rotationAngle * M_PI / 180) - ((rect6aY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6aPoints[3].y = (int)(rect6aX - centerX) * sin(rotationAngle * M_PI / 180) + ((rect6aY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect6aPoints, 4, black);

  // 第六個斜形（下半部分）
  gdPoint rect6bPoints[4];
  int rect6bX = rect6aX;  // 第六個長方形（下半部分）
  int rect6bY = rect6aY + 55 + 10;  // 上半部分的 Y 座標 + 上半部分的高度 + 間隔
  rect6bPoints[0].x = (int)(rect6bX - centerX) * cos(rotationAngle * M_PI / 180) - (rect6bY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6bPoints[0].y = (int)(rect6bX - centerX) * sin(rotationAngle * M_PI / 180) + (rect6bY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6bPoints[1].x = (int)((rect6bX + 15) - centerX) * cos(rotationAngle * M_PI / 180) - (rect6bY - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6bPoints[1].y = (int)((rect6bX + 15) - centerX) * sin(rotationAngle * M_PI / 180) + (rect6bY - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6bPoints[2].x = (int)((rect6bX + 15) - centerX) * cos(rotationAngle * M_PI / 180) - ((rect6bY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6bPoints[2].y = (int)((rect6bX + 15) - centerX) * sin(rotationAngle * M_PI / 180) + ((rect6bY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;
  rect6bPoints[3].x = (int)(rect6bX - centerX) * cos(rotationAngle * M_PI / 180) - ((rect6bY + 55) - centerY) * sin(rotationAngle * M_PI / 180) + centerX;
  rect6bPoints[3].y = (int)(rect6bX - centerX) * sin(rotationAngle * M_PI / 180) + ((rect6bY + 55) - centerY) * cos(rotationAngle * M_PI / 180) + centerY;

  gdImageFilledPolygon(rotated_im, rect6bPoints, 4, black);

    output = fopen("output.png", "wb");
    gdImagePng(rotated_im, output);
    fclose(output);

    gdImageDestroy(im);
    gdImageDestroy(rotated_im);

    return 0;
}</pre>
<p>以chatGPT去試著做，然而就是很烙賽。</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_chinese_flag(gdImagePtr img);

int main() {
    int width = 300; // 國旗寬度
    int height = 200; // 國旗高度

    gdImagePtr im = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(im, 0);

    draw_chinese_flag(im);

    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时出错。\n");
        return 1;
    }

    gdImagePngEx(im, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(im);

    return 0;
}

// 声明 draw_star 函数
void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);

void draw_chinese_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, yellow;

    // 國旗顏色
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景
    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星

    // 畫紅色背景
    gdImageFilledRectangle(img, 0, 0, width, height, red);

    // 設置星星的大小和位置
    int star_size = (int)(0.28 * height);
    int star_x = (int)(0.165 * width);
    int star_y = (int)(0.265 * height);

    // 畫大星星
    draw_star(img, star_x, star_y, star_size, yellow, 11.0);

    // 繪製小星星，位置根據實際國旗比例計算
    double radius = 0.15 * height;
    double angle = 360 / 7 * M_PI / 179.0;
    double rotation = -M_PI / 7.5;
    int cx = (int)(0.32 * width);
    int cy = (int)(0.27 * height);

    for (int i = -1; i &lt; 3; i++) {
        int x = (int)(cx + radius * cos(i * angle + rotation));
        int y = (int)(cy + radius * sin(i * angle + rotation));
        draw_star(img, x, y, 19, yellow, M_PI / 5.0);
    }
}

void draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {
    gdPoint points[10];

    // 计算星形的五个外点和五个内点
    double outer_radius = size / 2;
    double inner_radius = size / 6;
    double angle = M_PI / 5.0;

    for (int i = 0; i &lt; 10; i++) {
        double radius = (i % 2 == 0) ? outer_radius : inner_radius;
        double theta = rotation_angle + i * angle;
        points[i].x = x + radius * cos(theta);
        points[i].y = y + radius * sin(theta);
    }

    // 使用 gdImageFilledPolygon 绘制星形
    gdImageFilledPolygon(img, points, 10, color);
}</pre>
<p><img alt="" height="200" src="/images/proc_flag.png" width="300"/></p>
<p>偉大的戰狼祖國</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_uk_flag(gdImagePtr img);
void fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);

int main() {
    // 设置国旗的宽和高
    int width = 1200;
    int height = width / 2;

    // 创建图像
    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    // 绘制英国国旗
    draw_uk_flag(img);

    // 将图像保存到文件
    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "打开输出文件时发生错误。\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}



void draw_uk_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);

    int red, white, blue;
    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色
    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色

    gdImageFilledRectangle(img, 0, 0, width, height, blue);


  int x1, y1, x2, y2, x3, y3;
  {
    int line_thickness = 100;
    gdImageSetThickness(img, line_thickness);

    int x1, y1, x2, y2, x3, y3;

    // 绘制白色斜线
    x1 = 0;
    y1 = 600;
    x2 = 1200;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, white);

    x1 = 0;
    y1 = 0;
    x2 = 1200;
    y2 = 600;
    gdImageLine(img, x1, y1, x2, y2, white);
}
  {
    int line_thickness = 33;
    gdImageSetThickness(img, line_thickness);


    // 绘制红色斜线
    x1 = 566;
    y1 = 300;
    x2 = 1166;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 1233;
    y1 = 600;
    x2 = 633;
    y2 = 300;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 566;
    y1 = 300;
    x2 = -33;
    y2 = 0;
    gdImageLine(img, x1, y1, x2, y2, red);

    x1 = 600;
    y1 = 316.5;
    x2 = 0;
    y2 = 616.5;
    gdImageLine(img, x1, y1, x2, y2, red);
  }
  {
  int line_thickness = 33;
  gdImageSetThickness(img, line_thickness);

  int x1, y1, x2, y2, x3, y3;

  // 绘制  斜线
  x1 = 0;
  y1 = 600;
  x2 = 1200;
  y2 = 0;
  gdImageLine(img, x1, y1, x2, y2, red );


  x1 = 1200;
    y1 = 16.5;
    x2 = 600;
    y2 = 316.5;
    gdImageLine(img, x1, y1, x2, y2, white);


  x1 = 0;
    y1 = 583.5;
    x2 = 600;
    y2 = 283.5;
    gdImageLine(img, x1, y1, x2, y2, white);


  }

    // 绘制白色十字
    int cross_width = width / 32;
    int cross_arm_width = width / 32;
    int center_x = width / 2;
    int center_y = height / 2;

    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);
    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);

    // 绘制红色十字
    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);
    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);
}</pre>
<p><img alt="" height="250" src="/images/uk_flag.png" width="500"/></p>
<p>英國</p>
<h1>w8~w9</h1>
<p>這一周我們改以近端來編輯倉儲的內容，我完全不知道該如何行使，即便我知曉部分操作，但後面的一切實在是讓我完全不能理解，太過樊素、太過快速，再加上那個東西只能在學校使用(網路設定的原因)，根本沒有足夠的時間讓我慢慢摸索，再加上先前繪製的考試實在不盡人意，老實說蠻讓人難受。</p>
<h1>w10~w11</h1>
<p>這兩周的一切教學更像是在加深我們對於這門課程的精熟度，不過我實在是很難受，我們需要比對使用replit、s1511、localhost，哪一種方式更讓方便，我只能說，我似乎只是適合使用replit，畢竟它本身就足夠的方便，唯一不足的便是需要網路，且聽說最近即將迎來改，這也導致我們維護倉儲的難度再次提升，這讓本就不熟悉的我更難以忍受。</p>
<p>事實上，我本以為這門課是會從C語言的一切教起，至此至今，我只懂得看前三行文字，在這之後的英文，都是我沒有見過的，本身的英文不足，加上不知道該如何該如何識別哪些是專用的名詞，更甚至是沒有，這一切都導致我更難經營一切。</p>
<h1>w12</h1>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">  #include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

int main() {
    int width = 800;
    int height = 600;

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    FILE *outputFile = fopen("hellogd.png", "wb");
    if (outputFile == NULL) {

fprintf(stderr, "Error opening the output file.\n");

return 1;
    }

    int red = gdImageColorAllocate(img, 255, 0, 0);
    int blue = gdImageColorAllocate(img, 0, 0, 255);
    int black = gdImageColorAllocate(img, 0, 0, 0);
    int white = gdImageColorAllocate(img, 255, 255, 255);
    // 長方形塗色
    gdImageFilledRectangle(img, 0, 0, width, height, white);
    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);
    // 橢圓形塗色
    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);
    // 橢圓形畫線
    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);
    // 畫直線
    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);

    // 多邊形畫線
    gdPoint points[4];
    points[0].x = (int)width/4;
    points[0].y = (int)height*3/4;
    points[1].x = points[0].x + 100;
    points[1].y = points[0].y;
    points[2].x = points[1].x;
    points[2].y = points[1].y + 100;
    points[3].x = points[2].x - 100;
    points[3].y = points[2].y;
    gdImagePolygon(img, points, 4, black);

    // 多邊形塗色
    gdPoint points2[4];
    points2[0].x = (int)width/3;
    points2[0].y = (int)height/2;
    points2[1].x = points2[0].x + 100;
    points2[1].y = points2[0].y;
    points2[2].x = points2[1].x;
    points2[2].y = points2[1].y + 100;
    points2[3].x = points2[2].x - 150;
    points2[3].y = points2[2].y;
    gdImageFilledPolygon(img, points2, 4, red);

    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p><img alt="" height="250" src="/images/hellogd.png" width="333"/></p>
<h1>w13</h1>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">// 包含標準輸出入程式庫的標頭文件
#include &lt;math.h&gt;
#include &lt;stdio.h&gt;
// 主函式
int main() {
    // Open a file to write displacement and velocity data
    FILE *outputFile = fopen("motion_data.txt", "w");
    if (!outputFile) {
        fprintf(stderr, "Failed to create data file.\n");
        return 1;
    }

    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file
    double x = 0.2;  // Initial displacement
    double v = 0.0;  // Initial velocity
    double dt = 0.01; // Time step
    double t = 0.0;  // Time

    while (t &lt;= 10.0) {
        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here
        v += acceleration * dt;
        x += v * dt;

        fprintf(outputFile, "%lf %lf %lf\n", t, x, v);

        t += dt;
    }

    // Close the data file
    fclose(outputFile);

    // Start a Gnuplot process using popen
    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");
    if (!gnuplotPipe) {
        fprintf(stderr, "Failed to start Gnuplot.\n");
        return 1;
    }

    // Use Gnuplot plotting commands, specify font and output as PNG
    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font 'default,10' size 800,400\n");
    fprintf(gnuplotPipe, "set output './../images/motion_plot.png'\n");
    fprintf(gnuplotPipe, "set title 'Displacement and Velocity vs. Time'\n");
    fprintf(gnuplotPipe, "set xlabel 'Time (s)'\n");
    fprintf(gnuplotPipe, "set ylabel 'Displacement (m)'\n");
    fprintf(gnuplotPipe, "plot 'motion_data.txt' using 1:2 with lines lw 2 title 'Displacement', \
                             'motion_data.txt' using 1:3 with lines lw 2 title 'Velocity'\n");

    // Close the Gnuplot process
    fprintf(gnuplotPipe, "exit\n");
    pclose(gnuplotPipe);

    return 0;
}</pre>
<p><img alt="" height="250" src="/images/motion_plot.png" width="500"/></p>
<h1>w15</h1>
<p>線上測試第一題。</p>
<p><img alt="" height="250" src="/images/2roc_flag_in_gd.png" width="400"/></p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;

void draw_roc_flag(gdImagePtr img);

int main() {
    int width = 1200;
    int height = (int)(width * 2.0 / 3.0);

    gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);

    draw_roc_flag(img);

    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}

void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width / 4);
    int center_y = (int)(height / 4);
    int sun_radius = (int)(width / 8);
    int white_circle_dia = sun_radius;
    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;

    red = gdImageColorAllocate(img, 255, 0, 0);
    white = gdImageColorAllocate(img, 255, 255, 255);
    blue = gdImageColorAllocate(img, 0, 0, 149);

    gdImageFilledRectangle(img, 0, 0, width, height, red);
    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);

    // 利用一個藍色大圓與白色小圓畫出藍色環狀
    gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);

    // 不含太陽的部分

    // 連接第二組ABED的白線
    int ax = 429;
    int ay = 125;
    int bx = 279;
    int by = 165;
    int ex = 170;
    int ey = 274;
    int dx = 170;
    int dy = 274;

    gdImageLine(img, ax, ay, bx, by, white);
    gdImageLine(img, bx, by, ex, ey, white);
    gdImageLine(img, ex, ey, dx, dy, white);
    gdImageLine(img, dx, dy, ax, ay, white);
}
</pre>
<p><video controls="controls" height="603" width="1008">
<source src="/images/w15測試.mp4" type="video/mp4"/></video></p>
<p>第二題</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">// https://en.wikipedia.org/wiki/Flag_of_the_Republic_of_China 
// 內政部國旗參考資料: https://www.moi.gov.tw/cp.aspx?n=10621 
// cc roc_flag_in_gd.c -lgd -lm to link with gd and math library 
// https://www.rapidtables.com/web/color/RGB_Color.html 
// 幾何形狀著色與繪圖練習 
// 以下 gd 繪圖程式嘗試畫出 ROC 國旗, 請根據下列程式內容完成後續的國旗繪圖 
#include &lt;stdio.h&gt; 
#include &lt;gd.h&gt; 
#include &lt;math.h&gt; 

void draw_roc_flag(gdImagePtr img); 
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); 

int main() { 
    // width 3: height 2 
    int width = 1200; 
    // 國旗長寬比為 3:2 
    int height = (int)(width*2.0 / 3.0); 

    gdImagePtr img = gdImageCreateTrueColor(width, height); 
    gdImageAlphaBlending(img, 0); 

    draw_roc_flag(img); 

    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb"); 
    if (outputFile == NULL) { 
        fprintf(stderr, "Error opening the output file.\n"); 
        return 1; 
    } 
    gdImagePngEx(img, outputFile, 9); 
    fclose(outputFile); 
    gdImageDestroy(img); 
    return 0; 
} 

void draw_roc_flag(gdImagePtr img) { 
    int width = gdImageSX(img); 
    int height = gdImageSY(img); 
    int red, white, blue; 
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 
    int center_x = (int)(width/4); 
    int center_y = (int)(height/4); 
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 
    // 由於中央白日圓形的半徑為青天寬度的 1/8 
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 
    int sun_radius = (int)(width/8); 
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 
    int white_circle_dia = sun_radius; 
    // 中央藍色圓形半徑為中央白日的 1又 2/15 
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15; 
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色 
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色 
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色 
    // 根據畫布大小塗上紅色長方形區域 
    gdImageFilledRectangle(img, 0, 0, width, height, red); 
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); 
  {int x1 = 429; 
   int y1 = 125; 
   int x2 = 279; 
   int y2 = 165; 

   // 畫一條線連接兩個點 
   gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  {int x1 = 170; 
     int y1 = 274; 
     int x2 = 279; 
     int y2 = 165; 

     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  { 
    int x1 = 170; 
     int y1 = 274; 
     int x2 = 429; 
     int y2 = 125; 

     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  // 利用一個藍色大圓與白色小圓畫出藍色環狀 
  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); 
  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); 


  // 定義座標結構 
  typedef struct { 
      double x; 
      double y; 
  } Point; 

  // 計算圓與線的交點 
  void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) { 
      // 直線斜率 
      double m = (y2 - y1) / (x2 - x1); 

      // 直線方程式中的常數項 
      double b = y1 - m * x1; 

      // 圓與直線交點的計算 
      double A = 1 + pow(m, 2); 
      double B = 2 * (m * b - m * k - h); 
      double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2); 

      // 判斷交點個數 
    double discriminant = pow(B, 2) - 4 * A * C; 
    if (discriminant &gt; 0) { 
        double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A); 
        double y_intersect1 = m * x_intersect1 + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect1, y_intersect1); 

        double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A); 
        double y_intersect2 = m * x_intersect2 + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect2, y_intersect2); 
    } else if (discriminant == 0) { 
        double x_intersect = -B / (2 * A); 
        double y_intersect = m * x_intersect + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect, y_intersect); 
    } else { 
        printf("No points.\n"); 
    } 

  } 


      // 圓的參數 
      double circle_x = (int)(width/4); // 圓心 x 座標 
      double circle_y = (int)(height/4); // 圓心 y 座標 
      double radius = white_circle_dia +  white_circle_dia*2/15;   // 圓半徑 

      // 兩點座標 



  double x3 = 170; 
  double y3 = 274; 
  double x4 = 279; 
  double y4 = 165; 

  circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3); 


  double x5 = 279; 
  double y5 = 165; 
  double x6 = 429; 
  double y6 = 125; 

  circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5); 






  }</pre>
<p>第二題結果</p>
<p>交點: (388.90, 55.10)<br/>交點: (155.10, 288.90)<br/>交點: (449.72, 119.47)<br/>交點: (130.07, 204.72)</p>
<h1>w16</h1>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;

// Function to draw the mass-spring-damper system
void draw_system(const char* filename) {
    int width = 600;
    int height = 300;
    int x_margin = 50;
    int y_margin = 50;
    int mass_radius = 20;
    int spring_width = 4;
    int damper_width = 4;

    gdImagePtr img = gdImageCreate(width, height);
    int background_color = gdImageColorAllocate(img, 255, 255, 255);
    int mass_color = gdImageColorAllocate(img, 0, 0, 0);
    int spring_color = gdImageColorAllocate(img, 0, 0, 0);
    int damper_color = gdImageColorAllocate(img, 0, 0, 0);
    int wall_color = gdImageColorAllocate(img, 0, 0, 0);

    // Draw left wall
    gdImageLine(img, x_margin, y_margin, x_margin, height - y_margin, wall_color);

    // Draw mass 1
    int x1 = x_margin + 2 * mass_radius;
    int y1 = height / 2;
    gdImageFilledEllipse(img, x1, y1, mass_radius, mass_radius, mass_color);

    // Draw spring 1
    int spring1_start_x = x_margin;
    int spring1_end_x = x1 - mass_radius;
    int spring1_y = y1;
    gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);
    gdImageSetThickness(img, spring_width);
    gdImageLine(img, spring1_start_x, spring1_y, spring1_end_x, spring1_y, spring_color);
    gdImageSetThickness(img, 1);

    // Draw damper 1
    int damper1_start_x = x_margin / 2;
    int damper1_end_x = x1 - mass_radius;
    int damper1_y = y1;
    gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);
    gdImageSetThickness(img, damper_width);
    gdImageLine(img, damper1_start_x, damper1_y, damper1_end_x, damper1_y, damper_color);
    gdImageSetThickness(img, 1);

    // Draw mass 2
    int x2 = width - x_margin - 2 * mass_radius;
    int y2 = height / 2;
    gdImageFilledEllipse(img, x2, y2, mass_radius, mass_radius, mass_color);

    // Draw spring 2
    int spring2_start_x = x2 + mass_radius;
    int spring2_end_x = width - x_margin;
    int spring2_y = y2;
    gdImageLine(img, spring2_start_x, spring2_y, spring2_end_x, spring2_y, spring_color);
    gdImageSetThickness(img, spring_width);
    gdImageLine(img, spring2_start_x, spring2_y, spring2_end_x, spring2_y, spring_color);
    gdImageSetThickness(img, 1);

    // Draw damper 2
    int damper2_start_x = width - x_margin + mass_radius;
    int damper2_end_x = x2 + mass_radius;
    int damper2_y = y2;
    gdImageLine(img, damper2_start_x, damper2_y, damper2_end_x, damper2_y, damper_color);
    gdImageSetThickness(img, damper_width);
    gdImageLine(img, damper2_start_x, damper2_y, damper2_end_x, damper2_y, damper_color);
    gdImageSetThickness(img, 1);

    // Draw right wall
    gdImageLine(img, width - x_margin, y_margin, width - x_margin, height - y_margin, wall_color);

    // Save the image to a file
    FILE *output_file = fopen(filename, "wb");
    gdImagePng(img, output_file);
    fclose(output_file);

    // Free the memory used by the image
    gdImageDestroy(img);
}

int main() {
    draw_system("mass_spring_damper_system.png");
    return 0;
}
</pre>
<p><img alt="" height="300" src="/images/mass_spring_damper_system.png" width="600"/></p>
<p>第二題</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

// System parameters
#define M1 2.0
#define M2 3.0
#define K1 0.5
#define K2 1.0
#define K3 15.0
#define C1 0.25
#define C2 0.33
#define C3 0.5

// Function to calculate the derivative of the state
void calculate_derivative(double t, double state[4], double derivative[4]) {
    derivative[0] = state[2];  // dx1/dt = v1
    derivative[1] = state[3];  // dx2/dt = v2

    double delta_x = state[0] - state[1];

    // dv1/dt
    derivative[2] = -(K1 * state[0] + K2 * delta_x) / M1;

    // dv2/dt
    derivative[3] = -(K3 * state[1] - K2 * delta_x) / M2;
}

// Euler's Method for solving the system
void euler_method(double t_initial, double t_final, double dt, double initial_conditions[4]) {
    FILE *output_file;
    output_file = fopen("trajectory_data.txt", "w");

    double t = t_initial;
    double state[4];
    for (int i = 0; i &lt; 4; ++i) {
        state[i] = initial_conditions[i];
    }

    while (t &lt;= t_final) {
        fprintf(output_file, "%f %f %f %f %f\n", t, state[0], state[1], state[2], state[3]);

        double derivative[4];
        calculate_derivative(t, state, derivative);

        for (int i = 0; i &lt; 4; ++i) {
            state[i] += derivative[i] * dt;
        }

        t += dt;
    }

    fclose(output_file);
}

int main() {
    // Define the initial conditions
    double initial_conditions[4] = {1.0, -0.5, 0.0, 0.0};  // x1, x2, v1, v2

    // Time parameters
    double t_initial = 0.0;
    double t_final = 10.0;
    double dt = 0.01;

    // Solve the system using Euler's Method
    euler_method(t_initial, t_final, dt, initial_conditions);

    return 0;
}
</pre>
<p><img alt="" height="250" src="/images/trajectory_plot.png" width="333"/></p>
<h1>C_EX</h1>
<p>1</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
float a = 0.5;
double b = 1.2;
int c = 3;
b = b + a + c;

/* 输出 a, b, c 到屏幕 */
printf("a = %3.1f, b = %3.1f, c = %d\n", a, b, c);

return 0;
}</pre>
<p><img alt="" height="87" src="/images/ex1.png" width="271"/></p>
<p>2</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
   字元範例 1
   ==================== */
#include &lt;stdio.h&gt;

int main()
{
    char x, y;

    x = 'a';
    y = (char)97;

    /* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */
    printf("x = %c, y = %c, ASCII of y = %d", x, y, y);

    return 0;
}</pre>
<p><img alt="" height="61" src="/images/ex2.png" width="422"/></p>
<p>3</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int a = 64;
    int b = 0x40; // 以十六进制表示
    long c = 64L;

    // 打印变量的值
    printf("%d, %d, %ld", a, b, c);

    return 0;
}</pre>
<p><img alt="" height="67" src="/images/ex3.png" width="292"/></p>
<p>4</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    int a = 10, b = 5;

    // 第一组比较
    printf("a == b is %d\n", a == b);
    printf("a &gt; b is %d\n", a &gt; b);
    printf("a &lt; b is %d\n", a &lt; b);
    printf("a &gt;= b is %d\n", a &gt;= b);
    printf("a &lt;= b is %d\n", a &lt;= b);
    printf("a != b is %d\n", a != b);

    printf("\n");

    // 修改 b 的值
    b = 10;

    // 第二组比较
    printf("a == b is %d\n", a == b);
    printf("a &gt; b is %d\n", a &gt; b);
    printf("a &lt; b is %d\n", a &lt; b);
    printf("a &gt;= b is %d\n", a &gt;= b);
    printf("a &lt;= b is %d\n", a &lt;= b);
    printf("a != b is %d\n", a != b);

    return 0;
}</pre>
<p><img alt="" height="255" src="/images/ex4.png" width="224"/></p>
<p>5</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
int a;

// 第一次输出
a = 3;
printf("%d\n", !a); // 逻辑非运算，a为真，所以输出0

// 第二次输出
a = 0;
printf("%d\n", !a); // 逻辑非运算，a为假，所以输出1
}</pre>
<p><img alt="" height="75" src="/images/ex5.png" width="238"/></p>
<p>6</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    char a;

    // 使用 %zu 格式说明符输出 size_t 类型
    printf("The size of int is %zu\n", sizeof(int));

    // 使用 %zu 格式说明符输出 size_t 类型
    printf("The size of char a is %zu\n", sizeof(a));
}</pre>
<p><img alt="" height="66" src="/images/ex6.png" width="236"/></p>
<p>7</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

/* ====================
计算长方形面积, 需传入长与宽.
==================== */
int rect(int x, int y)
{
    int result;
    result = x * y;
    return result; /* 返回 result */
}

/* ====================
主函数
==================== */
int main()
{
    int x = 8, y = 4;
    int a;
    a = rect(x, y);
    printf("8*4 的面积是 %d", a);
    return 0;
}</pre>
<p><img alt="" height="56" src="/images/ex7.png" width="297"/></p>
<p>8</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
float circle( int r ); /* 宣告 circle 的 prototype */
void main()
{
float answer;
answer = circle(8);
printf( " 圓周長度是 %f", answer );
}
/* ====================
 circle 函數, 計算 circle 的圓周長
==================== */
float circle( int r )
{
float result;
result = 3.14159 * (double)1001 * r;
return ( result );
}
</pre>
<p><img alt="" height="43" src="/images/ex8.png" width="397"/></p>
<p>9</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main()
{
    char ch;

    printf("输入一个字符：");

    // 检查 scanf 的返回值，确保成功读取一个字符
    if (scanf(" %c", &amp;ch) != 1) {
        printf("读取字符失败\n");
        return 1; // 或者采取其他错误处理措施
    }

    if (ch == 'a') {
        printf("您按下了 'a'\n");
    }

    return 0;
}</pre>
<p><img alt="" height="67" src="/images/ex9.png" width="268"/></p>
<p>10</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

void main()
{
    int i;

    // 提示用户输入一个整数
    printf("100：");

    // 读取用户输入的整数
    scanf("%d", &amp;i);

    // 判断输入的整数，并输出相应的消息
    if (i &lt; 100)
    {
        printf("i &lt; 100\n");
    }
    else
    {
        if ((i &gt;= 100) &amp;&amp; (i &lt; 200))
        {
            printf("i &gt;= 100 且 i &lt; 200\n");
        }
        else
        {
            printf("i &gt;= 200\n");
        }
    }
}</pre>
<p><img alt="" height="178" src="/images/ex10.png" width="697"/></p>
<p>11</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* =========================
 function pointer 2
========================= */
#include &lt;stdio.h&gt;
/* ====================
say “Hello”.
==================== */
void Hello(void)
{
printf(“ Hello\n”);
}
/* ====================
say “World”.
==================== */
void World(void)
{
printf(“ World\n”);
}
/* ====================
main function.
==================== */
int main()
{
void (*func[3])(void); /* 宣告一個 function pointer array */
int i = 0 ;
func[0] = Hello; /* 建立 Jumping table */
func[1] = World;
while(1)
{
printf(“Input a number between 0 and 1 : ”);
scanf( “%d”,&amp;i );
/* 若 I 大於等於 2 或是小於 0 則離開 loop */
if( (i &gt;= 2)||(i &lt; 0) )
break;
else
func[ i ]( ); /* 執行! */
}
return 0;
}</pre>
<p><img alt="" height="404" src="/images/ex11(1).png" width="690"/></p>
<p>很顯然有問題</p>
<p>12</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

/* ====================
say “Hello”.
==================== */
void Hello(void)
{
    printf("Hello\n");
}

/* ====================
say “World”.
==================== */
void World(void)
{
    printf("World\n");
}

/* ====================
main function.
==================== */
int main()
{
    void (*func[3])(void); /* 声明一个函数指针数组 */
    int i = 0;

    func[0] = Hello; /* 建立 Jumping table */
    func[1] = World;

    while (1)
    {
        printf("Input a number between 0 and 1: ");
        scanf("%d", &amp;i);

        /* 如果 i 大于等于 2 或小于 0 则退出循环 */
        if (i &gt;= 2 || i &lt; 0)
            break;
        else
            func[i](); /* 执行函数 */
    }

    return 0;
}</pre>
<p><img alt="" height="94" src="/images/ex12.png" width="701"/></p>
<p>13</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

/* ====================
say “Hello”.
==================== */
void Hello(void)
{
    printf("Hello\n");
}

/* ====================
say “World”.
==================== */
void World(void)
{
    printf("World\n");
}

/* ====================
main function.
==================== */
int main()
{
    void (*func[3])(void); /* 声明一个函数指针数组 */
    int i = 0;

    func[0] = Hello; /* 建立 Jumping table */
    func[1] = World;

    while (1)
    {
        printf("Input a number between 0 and 1: ");

        // 检查 scanf 的返回值，确保成功读取一个整数
        if (scanf("%d", &amp;i) != 1)
        {
            printf("无效输入，请输入一个整数。\n");
            break;
        }

        /* 如果 i 大于等于 2 或小于 0 则退出循环 */
        if (i &gt;= 2 || i &lt; 0)
            break;
        else
            func[i](); /* 执行函数 */
    }

    return 0;
}</pre>
<p><img alt="" height="82" src="/images/ex13.png" width="275"/></p>
<p>22</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 pointer to pointer – 1.
==================== */
#include &lt;stdio.h&gt;

int main() {
    char *Hello = "Hello";
    char *World = "World";
    char *GoodBye = "Good Bye";
    char *StrArray[3];
    char **Str;
    int i;

    Str = StrArray;
    StrArray[0] = Hello;
    StrArray[1] = World;
    StrArray[2] = GoodBye;

    // Print strings using array indexing
    for (i = 0; i &lt; 3; i++) {
        printf("%s ", StrArray[i]);
    }

    // Print strings using pointer arithmetic
    Str = StrArray;  // Reset the pointer to the beginning
    for (i = 0; i &lt; 3; i++) {
        printf("%s ", *Str);
        Str++;
    }

    return 0;
}</pre>
<p><img alt="" height="74" src="/images/ex22.png" width="521"/></p>
<p>23</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
float this_is_a_number1, this_is_a_number2;
int scanf_result; // Dummy variable to capture scanf's return value

/* 读取输入的浮点数 */
scanf_result = scanf("%f", &amp;this_is_a_number1);

/* 读取输入的浮点数 */
scanf_result = scanf("%f", &amp;this_is_a_number2);

/* Your code here */

return 0;
}
</pre>
<p><img alt="" height="84" src="/images/ex23.png" width="286"/></p>
<h1>CEX_t</h1>
<p>1</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* =========================
 struct – 3.
========================= */
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

/* ====================
 struct Mouse.
==================== */
struct Mouse
{
    int xPos, yPos;
    char Name[10];
};

/* ====================
 Copy Mouse 1
==================== */
void cpyMouse1(struct Mouse *tgt, struct Mouse *src)
{
    tgt-&gt;xPos = src-&gt;xPos;
    tgt-&gt;yPos = src-&gt;yPos;
    strcpy(tgt-&gt;Name, src-&gt;Name);
}

/* ====================
 main function.
==================== */
int main()
{
    struct Mouse myMouse, yourMouse;

    yourMouse.xPos = 10;
    yourMouse.yPos = 20;
    strcpy(yourMouse.Name, "Mickey");

    cpyMouse1(&amp;myMouse, &amp;yourMouse);

    printf("Name: %s, X: %d, Y: %d\n", myMouse.Name, myMouse.xPos, myMouse.yPos);

    return 0;
}</pre>
<p><img alt="" height="69" src="/images/ct1.png" width="248"/></p>
<p>2</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* =========================
 #define 的範例 2.
========================= */
#include &lt;stdio.h&gt;

#define TRUE 1
#define FALSE 0
#define BOOL int

/* ====================
如果傳入值大於 10, 則傳回 TRUE
==================== */
BOOL is_greater_than_10(int i)
{
    if (i &gt; 10)
        return TRUE;
    else
        return FALSE;
}

/* ====================
 main function.
==================== */
int main()
{
    int i;
    BOOL result;

    printf("Input a number: ");

    // 檢查 scanf 的返回值
    if (scanf("%d", &amp;i) != 1) {
        printf("Error reading input.\n");
        return 1;  // 返回非零值表示錯誤
    }

    result = is_greater_than_10(i);

    if (result == TRUE)
        printf("Greater than 10!\n"); /* 大於 10 */
    else
        printf("Not greater than 10!\n"); /* 不大於 10 */

    return 0;
}</pre>
<p><img alt="" height="87" src="/images/ct2.png" width="290"/></p>
<p>3</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 &amp; operator.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int *pointer_a, a;
    pointer_a = &amp;a;
    a = 10;

    printf("%d, %d\n", a, *pointer_a);

    return 0;
}</pre>
<p><img alt="" height="70" src="/images/ct3.png" width="235"/></p>
<p>4</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
pointer – 6
==================== */
#include &lt;stdio.h&gt;

int main()
{
char *str = "Eric";

printf("%c\n", *(str + 0)); /* 也可寫 printf("%c", str[0] ); */
printf("%c\n", *(str + 1)); /* 也可寫 printf("%c", str[1] ); */
printf("%c\n", *(str + 2)); /* 也可寫 printf("%c", str[2] ); */
printf("%c\n", *(str + 3)); /* 也可寫 printf("%c", str[3] ); */

return 0;
}</pre>
<p><img alt="" height="115" src="/images/ct4.png" width="238"/></p>
<p></p>
<p>5</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 2d array.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int array[3][3];
    int x, y;

    array[0][0] = 1;
    array[0][1] = 2;
    array[0][2] = 3;
    array[1][0] = 4;
    array[1][1] = 5;
    array[1][2] = 6;
    array[2][0] = 7;
    array[2][1] = 8;
    array[2][2] = 9;

    for (x = 0; x &lt; 3; x++)
    {
        for (y = 0; y &lt; 3; y++)
        {
            printf("%d,", array[x][y]);
        }
    }

    return 0;
}</pre>
<p><img alt="" height="53" src="/images/ct5.png" width="338"/></p>
<p>6</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 array - 1.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int grade[5]; /* size = 5 的 array */
    int i;

    grade[0] = 75; /* 1st element */
    grade[1] = 80; /* 2nd element */
    grade[2] = 85; /* 3rd element */
    grade[3] = 70; /* 4th element */
    grade[4] = 90; /* 5th element */

    for (i = 0; i &lt; 5; i++)
    {
        printf("Number %d = %d\n", i, grade[i]);
    }

    return 0;
}</pre>
<p><img alt="" height="138" src="/images/ct6.png" width="241"/></p>
<p>7</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 do - while.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int i, j;
    i = 0;
    j = 10; /* 迴圈外先設定初值 */

    do
    {
        printf("i = %d, ", i);
        printf("j = %d\n", j);
        i++;
        j++;
    } while (i &lt; 6); /* 檢查條件的地方 */

    return 0;
}</pre>
<p><img alt="" height="132" src="/images/ct7.png" width="247"/></p>
<p>8</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
99 乘法.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    int x, y;

    for (x = 1; x &lt;= 9; x++)
    {
        for (y = 1; y &lt;= 9; y++)
        {
            printf("%2d ", x * y);  /* 使用 %2d 以確保數字的對齊性 */
        }
        printf("\n");
    }

    return 0;
}</pre>
<p><img alt="" height="181" src="/images/ct8.png" width="270"/></p>
<p>9</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
 Program "continue"
 ==================== */
#include &lt;stdio.h&gt;

int main()
{
    int i;

    for (i = 0; i &lt; 10; i++)
    {
        if ((i == 1) || (i == 2) || (i == 3))
        {
            continue; /* 忽略以後的 program, 回到 for. */
        }
        printf("i = %d\n", i);
    }

    return 0;
}</pre>
<p><img alt="" height="145" src="/images/ct9.png" width="283"/></p>
<p>10</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">/* ====================
switch - case 的範例 3.
==================== */
#include &lt;stdio.h&gt;

int main()
{
    char c;

    printf("Input a char: ");

    // 檢查 scanf 的返回值
    if (scanf("%c", &amp;c) != 1)
    {
        printf("Error reading input.\n");
        return 1; // 返回非零值表示錯誤
    }

    switch (c)
    {
    case 'a':
        printf("You pressed a\n");
        break;
    case 'b':
        printf("You pressed b\n");
        break;
    case 'c':
        printf("You pressed c\n");
        break;
    default:
        printf("Unrecognized input\n");
        break;
    }

    return 0;
}</pre>
<p><img alt="" height="79" src="/images/ct10.png" width="243"/></p>
<h1>ANSIC</h1>
<p>1</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

int main() {
    int n, x = 0;

    printf("\n\n Check whether a given number is an ugly number:\n");
    printf("----------------------------------------------------\n");

    // 检查 scanf 的返回值
    if (scanf("%d", &amp;n) != 1) {
        printf("Input is not a valid integer.\n");
        return 1;  // 退出程序，表示出现错误
    }

    if (n &lt;= 0) {
        printf("Input a correct number.\n");
    } else {
        while (n != 1) {
            if (n % 5 == 0) {
                n /= 5;
            } else if (n % 3 == 0) {
                n /= 3;
            } else if (n % 2 == 0) {
                n /= 2;
            } else {
                printf("It is not an ugly number.\n");
                x = 1;
                break;
            }
        }

        if (x == 0) {
            printf("It is an ugly number.\n");
        }
    }

    return 0;
}</pre>
<p><img alt="" height="171" src="/images/an1.png" width="429"/></p>
<p>2</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main(void)
{
    time_t epoch = 0;

    printf("\n自纪元开始以来的秒数：%ld\n", (long)epoch);
    printf("对应的日期和时间：%s\n", asctime(gmtime(&amp;epoch)));

    return 0;
}</pre>
<p><img alt="" height="92" src="/images/an2.png" width="368"/></p>
<p>3</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#define __STDC_WANT_LIB_EXT1__ 1
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;

int main(void)
{
    time_t t = time(NULL);
    printf("\nThe calendar time expressed as a local Time is :");   
    printf("\nUTC:   %s", asctime(gmtime(&amp;t)));
    printf("local: %s\n", asctime(localtime(&amp;t)));

#ifdef __STDC_LIB_EXT1__
    struct tm buf;
    char str[26];

    asctime_s(str, sizeof str, gmtime_s(&amp;t, &amp;buf));
    printf("UTC:   %s", str);

    asctime_s(str, sizeof str, localtime_s(&amp;t, &amp;buf));
    printf("local: %s", str);
#endif

    return 0;
}
</pre>
<p><img alt="" height="101" src="/images/an3.png" width="399"/></p>
<p>4</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;time.h&gt;
 
int main(void)
{
    // 设置时区为“Asia/Calcutta”
    setenv("TZ", "/usr/share/zoneinfo/Asia/Calcutta", 1);   
 
    // 获取并打印当前日期和时间
    struct tm tm = *localtime(&amp;(time_t){time(NULL)});
    printf("\n今天是 :            %s", asctime(&amp;tm));
    printf("(夏令时 %s)\n", tm.tm_isdst ? "生效中" : "未生效");
 
    // 将月份减去 24，表示 24 个月前的日期和时间
    tm.tm_mon -= 24;  
 
    // 重新计算时间
    mktime(&amp;tm);       
 
    // 获取并打印 24 个月前的日期和时间
    printf("\n24个月前的日期是 : %s", asctime(&amp;tm));
    printf("(夏令时 %s)\n\n", tm.tm_isdst ? "生效中" : "未生效");
 
    return 0;
}</pre>
<p><img alt="" height="139" src="/images/an4.png" width="389"/></p>
<p>5</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;limits.h&gt;

double powxn(double x, int n) {
    double k;
    if (n == 0) return 1;
    k = powxn(x * x, n / 2);
    if (n % 2) k = k * x;
    return k;
}

int main(void)
{
    double x = 7.0;
    int n = 2;
    printf("\nx = %f, y = %d  ", x, n);
    printf("\nResult:(x^n) : %f ",powxn(x, n));
    x = 6.2;
    n = 3;
    printf("\n\nx = %f, y = %d  ", x, n);
    printf("\nResult:(x^n) : %f ",powxn(x, n));
    return 0;
}</pre>
<p><img alt="" height="134" src="/images/an5.png" width="392"/></p>
<p>6</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">//Source: https://bit.ly/2KNsta8
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;string.h&gt;
#include &lt;stdbool.h&gt;

char* fractionToDecimal(int numerator, int denominator) {
    char *p;
    int psz, n, *dec, dsz, x;
    long long num, den, k, f;
    int i, repeat_at;
    int neg = 0;

    psz = dsz = 100; n = x = 0;
    p = malloc(psz * sizeof(char));

    neg = ((numerator &gt; 0 &amp;&amp; denominator &lt; 0) ||
           (numerator &lt; 0 &amp;&amp; denominator &gt; 0)) ? 1 : 0;
    num = numerator;
    den = denominator;
    num = (num &lt; 0) ? -num : num;
    den = (den &lt; 0) ? -den : den;

    k = num / den;
    f = num % den;

    if (neg &amp;&amp; (k || f)) p[n ++] = '-';

    n += sprintf(&amp;p[n], "%lld", k);
    if (!f) {
        p[n] = 0;
        return p;
    }

    p[n ++] = '.';

    dec = malloc(dsz * sizeof(int));

    repeat_at = -1;
    if (f &lt; 0) f = -f;
    while (f) {
        for (i = 0; i &lt; x; i += 2) {
            if (dec[i] == f) {
                repeat_at = i;
                goto done;
            }
        }
        if (x + 1 &gt;= dsz) {
            dsz *= 2;
            dec = realloc(dec, dsz * sizeof(int));
        }
        dec[x ++] = f;
        f *= 10;
        k = f / den;
        dec[x ++] = k;
        f = f % den;
    }

done:
    for (i = 0; i &lt; x; i += 2) {
        if (n + 3 &gt; psz) {
            psz *= 2;
            p = realloc(p, psz * sizeof(char));
        }
        if (repeat_at == i) {
            p[n ++] = '(';
        }
        p[n ++] = '0' + dec[i + 1];
    }
    if (repeat_at != -1) p[n ++] = ')';
    p[n ++] = 0;

    free(dec);

    return p;
}

int main(void)
{
    int n = 3;
    int d = 2;
    printf("\nn = %d, d = %d  ", n, d);
    printf("\nFractional part: %s ", fractionToDecimal(n, d));

    n = 4;
    d = 7;
    printf("\n\nn = %d, d = %d  ", n, d);
    printf("\nFractional part: %s ", fractionToDecimal(n, d));

    return 0;
}</pre>
<p><img alt="" height="154" src="/images/an6.png" width="408"/></p>
<p>7</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int fno, sno, *ptr, *qtr, sum;  // 宣告整數變數 fno, sno, sum，以及整數指標 ptr, qtr

    printf("\n\n Pointer : Add two numbers :\n");
    printf("--------------------------------\n");

    printf(" Input the first number : ");
    // 檢查 scanf 的返回值，確保成功讀取一個整數
    if (scanf("%d", &amp;fno) != 1) {
        fprintf(stderr, "Error: Invalid input for the first number.\n");
        return 1;
    }

    printf(" Input the second number : ");
    // 檢查 scanf 的返回值，確保成功讀取一個整數
    if (scanf("%d", &amp;sno) != 1) {
        fprintf(stderr, "Error: Invalid input for the second number.\n");
        return 1;
    }

    ptr = &amp;fno;  // 將 fno 的地址賦值給指標 ptr
    qtr = &amp;sno;  // 將 sno 的地址賦值給指標 qtr

    sum = *ptr + *qtr;  // 解參考 ptr 和 qtr，取得值並計算它們的和

    printf(" The sum of the entered numbers is : %d\n\n", sum);  // 輸出輸入數字的總和

    return 0;
}</pre>
<p><img alt="" height="175" src="/images/an7.png" width="329"/></p>
<p>8</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int arr[10];  // 宣告一個大小為10的整數數組，用於存儲使用者輸入的整數
    int i;

    // 提示用戶輸入十個整數
    printf("\n\nRead and Print elements of an array:\n");
    printf("-----------------------------------------\n");
    printf("Input 10 elements in the array :\n");

    // 使用迴圈接受用戶輸入，並將整數存入數組
    for (i = 0; i &lt; 10; i++) {
        printf("element - %d : ", i);

        // 檢查 scanf 的返回值，確保成功讀取一個整數
        if (scanf("%d", &amp;arr[i]) != 1) {
            fprintf(stderr, "Error: Invalid input for element %d.\n", i);
            return 1;  // 如果輸入無效，返回錯誤碼
        }
    }

    // 顯示數組中的所有元素
    printf("\nElements in array are: ");
    for (i = 0; i &lt; 10; i++) {
        printf("%d  ", arr[i]);
    }

    printf("\n");
    return 0;
}</pre>
<p><img alt="" height="169" src="/images/an8.png" width="344"/></p>
<p>9</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int days, years, weeks;

    days = 1329; // 總天數

    // 將天數轉換為年、週和天
    years = days / 365;  // 計算年數
    weeks = (days % 365) / 7;  // 計算週數
    days = days % 7;  // 計算剩餘的天數

    // 輸出結果
    printf("Years: %d\n", years);
    printf("Weeks: %d\n", weeks);
    printf("Days: %d\n", days);

    return 0;
}</pre>
<p><img alt="" height="89" src="/images/an9.png" width="261"/></p>
<p>10</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    double wi1, ci1, wi2, ci2, result; // 宣告變數，用於存儲物品的重量和數量

    // 提示用戶輸入物品1的重量
    printf("Weight - Item1: ");
    if (scanf("%lf", &amp;wi1) != 1) {
        fprintf(stderr, "Error: Invalid input for weight of item1.\n");
        return 1;
    }

    // 提示用戶輸入物品1的數量
    printf("No. of item1: ");
    if (scanf("%lf", &amp;ci1) != 1) {
        fprintf(stderr, "Error: Invalid input for count of item1.\n");
        return 1;
    }

    // 提示用戶輸入物品2的重量
    printf("Weight - Item2: ");
    if (scanf("%lf", &amp;wi2) != 1) {
        fprintf(stderr, "Error: Invalid input for weight of item2.\n");
        return 1;
    }

    // 提示用戶輸入物品2的數量
    printf("No. of item2: ");
    if (scanf("%lf", &amp;ci2) != 1) {
        fprintf(stderr, "Error: Invalid input for count of item2.\n");
        return 1;
    }

    // 計算平均值
    result = ((wi1 * ci1) + (wi2 * ci2)) / (ci1 + ci2);

    // 輸出平均值
    printf("Average Value = %f\n", result);

    return 0;
}</pre>
<p><img alt="" height="111" src="/images/an10.png" width="246"/></p>
<h1>ANSIC_T</h1>
<p>1</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int x;    // 用於存儲總里程的變數，以公里為單位
    float y;  // 用於存儲總耗油量的變數，以升為單位

    // 提示用戶輸入總里程並存入 'x'
    printf("Input total distance in km: ");
    // 檢查 scanf 的返回值，確保成功讀取一個整數
    if (scanf("%d", &amp;x) != 1) {
        fprintf(stderr, "Error: Invalid input for total distance.\n");
        return 1;
    }

    // 提示用戶輸入總耗油量並存入 'y'
    printf("Input total fuel spent in liters: ");
    // 檢查 scanf 的返回值，確保成功讀取一個浮點數
    if (scanf("%f", &amp;y) != 1) {
        fprintf(stderr, "Error: Invalid input for total fuel spent.\n");
        return 1;
    }

    // 計算並打印平均油耗
    printf("Average consumption (km/lt) %.3f ", x / y);
    printf("\n");

    return 0;
}</pre>
<p><img alt="" height="137" src="/images/ant1.png" width="321"/></p>
<p>2</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    float x, y, z, P; // 宣告變數，用於存儲三角形的邊長和周長

    // 提示用戶輸入三個邊長並存入 'x', 'y', 和 'z'
    printf("\nInput the first number: ");
    if (scanf("%f", &amp;x) != 1) {
        fprintf(stderr, "Error: Invalid input for the first number.\n");
        return 1;
    }

    printf("\nInput the second number: ");
    if (scanf("%f", &amp;y) != 1) {
        fprintf(stderr, "Error: Invalid input for the second number.\n");
        return 1;
    }

    printf("\nInput the third number: ");
    if (scanf("%f", &amp;z) != 1) {
        fprintf(stderr, "Error: Invalid input for the third number.\n");
        return 1;
    }

    if (x &lt; (y + z) &amp;&amp; y &lt; (x + z) &amp;&amp; z &lt; (y + x)) // 檢查是否可以構成三角形
    {
        P = x + y + z; // 計算周長
        printf("\nPerimeter  = %.1f\n", P); // 輸出周長
    } else {
        printf("Not possible to create a triangle..!"); // 如果無法構成三角形，輸出相應的信息
    }

    return 0;
}</pre>
<p><img alt="" height="172" src="/images/ant2.png" width="293"/></p>
<p>3</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int j, numbers[5], total = 0; // 宣告數組用於存儲 5 個數字和變數用於總和

    // 提示用戶輸入五個數字並存入數組
    for (j = 0; j &lt; 5; j++) {
        printf("\nInput the %s number: ", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));
        if (scanf("%d", &amp;numbers[j]) != 1) {
            fprintf(stderr, "Error: Invalid input for the %s number.\n", j == 0 ? "first" : (j == 1 ? "second" : (j == 2 ? "third" : (j == 3 ? "fourth" : "fifth"))));
            return 1;
        }
    }

    for (j = 0; j &lt; 5; j++) {
        if ((numbers[j] % 2) != 0) // 檢查數字是否為奇數
        {
            total += numbers[j]; // 將奇數添加到總和中
        }
    }

    printf("\nSum of all odd values: %d", total); // 輸出所有奇數的總和
    return 0;
}</pre>
<p><img alt="" height="219" src="/images/ant3.png" width="369"/></p>
<p>4</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;limits.h&gt;

int divide_two(int dividend_num, int divisor_num) {
    int sign = (float)dividend_num / divisor_num &gt; 0 ? 1 : -1;
    unsigned int dvd = dividend_num &gt; 0 ? dividend_num : -dividend_num;
    unsigned int dvs = divisor_num &gt; 0 ? divisor_num : -divisor_num;
    unsigned int bit_num[33];
    unsigned int i = 0;
    long long d = dvs;

    bit_num[i] = d;
    while (d &lt;= dvd) {
        bit_num[++i] = d = d &lt;&lt; 1;
    }
    i--;

    unsigned int result = 0;
    while (dvd &gt;= dvs) {
        if (dvd &gt;= bit_num[i]) {
            dvd -= bit_num[i];
            result += (1 &lt;&lt; i);
        } else {
            i--;
        }
    }

    if (result &gt; INT_MAX &amp;&amp; sign &gt; 0) {
        return INT_MAX;
    }
    return (int)result * sign;
}

int main(void) {
    int dividend_num = 15;
    int divisor_num = 3;
    printf("Quotient after dividing %d and %d: %d", dividend_num, divisor_num, divide_two(dividend_num, divisor_num));
    return 0;
}</pre>
<p><img alt="" height="54" src="/images/ant4.png" width="294"/></p>
<p>5</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

// inline function to check if a given integer is even
inline int is_even(int n) {
    return n % 2 == 0;
}

int main() {
    int num;

    // 檢查 scanf 的返回值，確保成功讀取一個整數
    if (scanf("%d", &amp;num) != 1) {
        fprintf(stderr, "Error: Invalid input. Please enter a valid integer.\n");
        return 1;
    }

    if (is_even(num)) {
        printf("%d is even.\n", num);
    } else {
        printf("%d is odd.\n", num);
    }

    return 0;
}</pre>
<p><img alt="" height="67" src="/images/ant5.png" width="245"/></p>
<p>6</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;


inline float celsius_To_Fahrenheit(float celsius) {
  return (celsius * 9 / 5) + 32;
}
inline float fahrenheit_To_Celsius(float fahrenheit) {
  return (fahrenheit - 32) * 5 / 9;
}

int main() {
  float celsius = 40;
  float fahrenheit = 89.60;
  printf("%.2f Celsius is equal to %.2f Fahrenheit\n", celsius, celsius_To_Fahrenheit(celsius));
  printf("\n%.2f Fahrenheit is equal to %.2f Celsius\n", fahrenheit,
    fahrenheit_To_Celsius(fahrenheit));
  return 0;
}</pre>
<p><img alt="" height="85" src="/images/ant6.png" width="376"/></p>
<p>7</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
 
int main() {
    int a, b;
 
    // Prompt user for input
    printf("Input two pairs values (integer values):\n");
 
    // Read two integer values from user and store them in 'a' and 'b'
    if (scanf("%d %d", &amp;a, &amp;b) != 2) {
        fprintf(stderr, "Error: Invalid input. Please enter two integer values.\n");
        return 1;  // Return an error code for invalid input
    }
 
    // Check if 'a' is not equal to 'b'
    if (a != b) {
        // Check if 'b' is greater than 'a'
        if (b &gt; a) {
            printf("Ascending order\n");  // Print message for ascending order
        } else {
            printf("Descending order\n");  // Print message for descending order
        }
    }
 
    return 0;  // End of program
}</pre>
<p><img alt="" height="111" src="/images/ant7.png" width="341"/></p>
<p>8</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main(void) {
    unsigned char char1, char2, char3, char4, char5, char6, char7, char8;

    // Print table header
    printf("|---------------------------------------------------------------------------------------------------------|\n");
    printf("|extended ASCII table - excluding control characters                                                      |\n");
    printf("|   Ch Dec  Hex  |  Ch Dec  Hex   | Ch Dec  Hex | Ch Dec  Hex  | Ch Dec  Hex  | Ch Dec  Hex | Ch Dec  Hex |\n");
    printf("|----------------|----------------|-------------|--------------|--------------|-------------|-------------|\n");

    // Loop through characters
    for (int i = 0; i &lt; 32; i++) {
        // Calculate characters for different ranges
        char1 = i;
        char2 = i + 32;
        char3 = i + 64;
        char4 = i + 96;
        char5 = i + 128;  // extended ASCII characters
        char6 = i + 160;
        char7 = i + 192;
        char8 = i + 224;

        // Print characters and their decimal and hexadecimal representations
        printf("|  %c %3d %#x ", char2, char2, char2);
        printf("|  %c %3d %#x ", char3, char3, char3);

        // Special case for DEL character
        if (char4 == 127) {
            printf("|%s %3d %#x |", "DEL", char4, char4);
        } else {
            printf("|  %c %3d %#x |", char4, char4, char4);
        }

        // Print extended ASCII characters for the current system.
        printf("  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |  %c %3d %#x |\n",
               char5, char5, char5,
               char6, char6, char6,
               char7, char7, char7,
               char8, char8, char8);
    }

    return 0;  // Indicate successful execution of the program
}</pre>
<p><img alt="" height="399" src="/images/ant8.png" width="857"/></p>
<p>9</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    int x; // Declare variable x

    // Print header for the table
    printf("x+1\tx+3\tx+5\tx+7\n\n");
    printf("---------------------------\n");

    // Loop to generate and print table values
    for (x = 1; x &lt;= 15; x += 3)
        printf("%d\t%d\t%d\t%d\n", x, (x + 2), (x + 4), (x + 6));

    return 0; // Indicate successful program execution
}
</pre>
<p><img alt="" height="147" src="/images/ant9.png" width="241"/></p>
<p>10</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;

int main() {
    // 声明变量
    float principal_amt, rate_of_interest, days, interest;
    const int yearInDays = 365; // 用于转换利率的常量

    // 提示用户输入贷款金额
    printf("输入贷款金额 (输入 0 退出): ");
    if (scanf("%f", &amp;principal_amt) != 1) {
        fprintf(stderr, "Error: Invalid input for loan amount.\n");
        return 1;
    }

    // 主循环用于处理贷款
    while ((int)principal_amt != 0) 
    {
        // 提示用户输入利率
        printf("输入利率: ");
        if (scanf("%f", &amp;rate_of_interest) != 1) {
            fprintf(stderr, "Error: Invalid input for interest rate.\n");
            return 1;
        }

        // 提示用户输入贷款期限（天）
        printf("输入贷款期限（天）: ");
        if (scanf("%f", &amp;days) != 1) {
            fprintf(stderr, "Error: Invalid input for loan term.\n");
            return 1;
        }

        // 计算利息
        interest = (principal_amt * rate_of_interest * days) / yearInDays;

        // 显示利息金额
        printf("利息金额为 $%.2f\n", interest);

        // 提示用户输入下一个贷款金额
        printf("\n\n输入贷款金额 (输入 0 退出): ");
        if (scanf("%f", &amp;principal_amt) != 1) {
            fprintf(stderr, "Error: Invalid input for loan amount.\n");
            return 1;
        }
    }

    return 0;
}</pre>
<p><img alt="" height="153" src="/images/ant10.png" width="305"/></p>
<h1>程式解釋</h1>
<p>以w15的題目一為例</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">#include &lt;stdio.h&gt;
#include &lt;gd.h&gt;
#include &lt;math.h&gt;</pre>
<ol>
<li>
<p><code>&lt;stdio.h&gt;</code>：這是標準輸入輸出標頭文件，包含了一些用於輸入和輸出操作的函數，例如 <code>printf</code> 和 <code>scanf</code>。在這個程式中，它可能用於處理一般的輸入輸出操作。</p>
</li>
<li>
<p><code>&lt;gd.h&gt;</code>：這是一個與圖形處理有關的標頭文件。<code>gd</code> 是一個用於生成圖片的函式庫，提供了許多繪圖和圖形處理的功能。這個標頭文件可能被用來操作圖片或進行其他與圖形相關的操作。</p>
</li>
<li>
<p><code>&lt;math.h&gt;</code>：這是數學函式的標頭文件，包含了許多數學運算的函數，例如平方根、三角函數等。在這個程式中，它可能被用來進行數學運算。</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">void draw_roc_flag(gdImagePtr img);</pre>
<p>這是一個函數原型（function prototype），它聲明了一個名為 <code>draw_roc_flag</code> 的函數，該函數接受一個 <code>gdImagePtr</code> 類型的引數 <code>img</code>，但沒有明確的返回類型（通常默認為 <code>int</code>）。函數的目的是在給定的圖像上繪製一個 "roc flag"（ROC 標誌）。</p>
<p>通常，這樣的函數原型會在程式碼的開頭進行聲明，以便在後面的程式碼中進行實現。</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">int main() {
    int width = 1200;
    int height = (int)(width * 2.0 / 3.0);</pre>
<p>這是 <code>main</code> 函數的開始部分，它初始化了兩個整數變數 <code>width</code> 和 <code>height</code>。這段程式碼的目的是設定一個圖片的寬度和高度。</p>
<ol>
<li>
<p><code>int width = 1200;</code>：這一行代表將 <code>width</code> 設定為整數值 1200。這可能是所需圖片的寬度，表示圖片的水平大小為 1200 像素。</p>
</li>
<li>
<p><code>int height = (int)(width * 2.0 / 3.0);</code>：這一行計算 <code>height</code> 的值。它使用了 <code>width</code> 變數的值，將其乘以 2.0，然後除以 3.0。這樣的計算可能是為了保持圖片的寬高比（2:3），並將結果轉換為整數。結果存儲在 <code>height</code> 變數中，表示圖片的垂直大小。</p>
</li>
</ol>
</li>
</ol>
<div class="line number1 index0 alt2">
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">gdImagePtr img = gdImageCreateTrueColor(width, height);
    gdImageAlphaBlending(img, 0);
 
    draw_roc_flag(img);
 
    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");
    if (outputFile == NULL) {
        fprintf(stderr, "Error opening the output file.\n");
        return 1;
    }
    gdImagePngEx(img, outputFile, 9);
    fclose(outputFile);
    gdImageDestroy(img);
    return 0;
}</pre>
<p>這段程式碼繪製了一個 ROC 標誌（ROC flag）並將其保存為 PNG 圖像文件。讓我解釋一下這段程式碼的主要步驟：</p>
<ol>
<li>
<p><code>gdImagePtr img = gdImageCreateTrueColor(width, height);</code>：這一行創建了一個 <code>gdImagePtr</code> 指針，該指針指向一個真彩色的圖像，寬度為 <code>width</code>，高度為 <code>height</code>。</p>
</li>
<li>
<p><code>gdImageAlphaBlending(img, 0);</code>：這一行設置圖像的 alpha 混合模式。這裡的 <code>0</code> 表示禁用 alpha 混合，即不進行透明度的混合。</p>
</li>
<li>
<p><code>draw_roc_flag(img);</code>：這一行呼叫了之前聲明的 <code>draw_roc_flag</code> 函數，將 ROC 標誌繪製在剛剛創建的圖像上。</p>
</li>
<li>
<p><code>FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");</code>：這一行打開了一個二進制寫入模式的文件，文件名為 "roc_flag_in_gd.png"。這裡準備將繪製好的圖像保存為 PNG 文件。</p>
</li>
<li>
<p><code>if (outputFile == NULL) { ... }</code>：這一行檢查文件是否成功打開。如果打開失敗，會輸出錯誤信息並結束程式。</p>
</li>
<li>
<p><code>gdImagePngEx(img, outputFile, 9);</code>：這一行將圖像以 PNG 格式寫入到已經打開的文件中。數字 <code>9</code> 可能代表 PNG 圖像的壓縮級別，數字越大壓縮越高，範圍一般在 0 到 9 之間。</p>
</li>
<li>
<p><code>fclose(outputFile);</code>：這一行關閉了文件，確保寫入操作完成。</p>
</li>
<li>
<p><code>gdImageDestroy(img);</code>：這一行釋放了先前創建的圖像資源，防止內存洩漏。</p>
</li>
<li>
<p><code>return 0;</code>：程式執行成功，返回 0，表示沒有錯誤發生。</p>
</li>
</ol>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">void draw_roc_flag(gdImagePtr img) {
    int width = gdImageSX(img);
    int height = gdImageSY(img);
    int red, white, blue;
    int center_x = (int)(width / 4);
    int center_y = (int)(height / 4);
    int sun_radius = (int)(width / 8);
    int white_circle_dia = sun_radius;
    int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;</pre>
<p>這是 <code>draw_roc_flag</code> 函數的開頭部分，該函數負責在給定的 <code>gdImagePtr</code> 圖像上繪製 ROC 標誌。讓我解釋這部分的主要變數和計算：</p>
<ol>
<li>
<p><code>int width = gdImageSX(img);</code> 和 <code>int height = gdImageSY(img);</code>：這兩行獲取了給定圖像 <code>img</code> 的寬度和高度。<code>gdImageSX</code> 返回圖像的寬度，而 <code>gdImageSY</code> 返回圖像的高度。</p>
</li>
<li>
<p><code>int red, white, blue;</code>：這三個變數可能用來表示紅色、白色和藍色的顏色值。這些變數的值可能在後續的程式碼中被賦值，以便使用不同的顏色。</p>
</li>
<li>
<p><code>int center_x = (int)(width / 4);</code> 和 <code>int center_y = (int)(height / 4);</code>：這兩行計算了 ROC 標誌中心點的 x 和 y 坐標。它們使用圖像寬度和高度的四分之一，將標誌放置在圖像的左上角附近。</p>
</li>
<li>
<p><code>int sun_radius = (int)(width / 8);</code>：這行計算了太陽的半徑，使其為圖像寬度的八分之一。這可能是 ROC 標誌中太陽的尺寸。</p>
</li>
<li>
<p><code>int white_circle_dia = sun_radius;</code>：這行設定了一個白色圓的直徑，使其等於太陽的半徑。這個白色圓可能代表標誌的中心。</p>
</li>
<li>
<p><code>int blue_circle_dia = white_circle_dia + white_circle_dia * 2 / 15;</code>：這行計算了一個藍色圓的直徑，使其略大於白色圓，可能用於標誌的外部藍色圈。</p>
</li>
</ol>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">red = gdImageColorAllocate(img, 255, 0, 0);
    white = gdImageColorAllocate(img, 255, 255, 255);
    blue = gdImageColorAllocate(img, 0, 0, 149);
 
    gdImageFilledRectangle(img, 0, 0, width, height, red);
    gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);</pre>
<p>這段程式碼為 <code>draw_roc_flag</code> 函數中的一部分，它設定了紅色、白色和藍色的顏色，並使用這些顏色填充了兩個矩形區域。以下是這段程式碼的解釋：</p>
<ol>
<li>
<p><code>red = gdImageColorAllocate(img, 255, 0, 0);</code>：這一行使用 <code>gdImageColorAllocate</code> 函數為紅色分配一個顏色索引，該函數的參數分別是圖像指針 <code>img</code>，以及 RGB（紅、綠、藍） 值。在這裡，<code>255, 0, 0</code> 表示紅色的全彩 RGB 值。</p>
</li>
<li>
<p><code>white = gdImageColorAllocate(img, 255, 255, 255);</code>：這一行為白色分配一個顏色索引，使用全彩 RGB 值 <code>255, 255, 255</code> 表示白色。</p>
</li>
<li>
<p><code>blue = gdImageColorAllocate(img, 0, 0, 149);</code>：這一行為藍色分配一個顏色索引，使用全彩 RGB 值 <code>0, 0, 149</code> 表示藍色。</p>
</li>
<li>
<p><code>gdImageFilledRectangle(img, 0, 0, width, height, red);</code>：這一行使用先前定義的紅色填充了整個圖像區域，即一個矩形，其左上角為座標 (0, 0)，右下角為座標 (width, height)。</p>
</li>
<li>
<p><code>gdImageFilledRectangle(img, 0, 0, (int)(width / 2.0), (int)(height / 2.0), blue);</code>：這一行使用藍色填充了圖像的左上角區域，即一個矩形，其左上角為座標 (0, 0)，右下角為座標 (width / 2, height / 2)。</p>
</li>
</ol>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false"> gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);
    gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);</pre>
<p>這段程式碼在圖像上繪製了兩個填充的橢圓，一個使用藍色填充，另一個使用白色填充。這兩個橢圓可能是 ROC 標誌的一部分，具體地：</p>
<ol>
<li>
<p><code>gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);</code>：這行程式碼創建了一個以 <code>(center_x, center_y)</code> 為中心，長軸和短軸都為 <code>blue_circle_dia</code> 的藍色填充橢圓。</p>
</li>
<li>
<p><code>gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);</code>：這行程式碼創建了一個以 <code>(center_x, center_y)</code> 為中心，長軸和短軸都為 <code>white_circle_dia</code> 的白色填充橢圓。</p>
</li>
</ol>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">int ax = 429;
    int ay = 125;
    int bx = 279;
    int by = 165;
    int ex = 170;
    int ey = 274;
    int dx = 170;
    int dy = 274;
 
    gdImageLine(img, ax, ay, bx, by, white);
    gdImageLine(img, bx, by, ex, ey, white);
    gdImageLine(img, ex, ey, dx, dy, white);
    gdImageLine(img, dx, dy, ax, ay, white);
}</pre>
<p>這段程式碼在圖像上使用白色線條繪製了一個四邊形。具體來說：</p>
<ol>
<li>
<p><code>gdImageLine(img, ax, ay, bx, by, white);</code>：這行程式碼繪製了一條從 <code>(ax, ay)</code> 到 <code>(bx, by)</code> 的白色線條。</p>
</li>
<li>
<p><code>gdImageLine(img, bx, by, ex, ey, white);</code>：這行程式碼繪製了一條從 <code>(bx, by)</code> 到 <code>(ex, ey)</code> 的白色線條。</p>
</li>
<li>
<p><code>gdImageLine(img, ex, ey, dx, dy, white);</code>：這行程式碼繪製了一條從 <code>(ex, ey)</code> 到 <code>(dx, dy)</code> 的白色線條。</p>
</li>
<li>
<p><code>gdImageLine(img, dx, dy, ax, ay, white);</code>：這行程式碼繪製了一條從 <code>(dx, dy)</code> 到 <code>(ax, ay)</code> 的白色線條。</p>
</li>
</ol>
<p>這四條線構成了一個四邊形，其頂點分別為 <code>(ax, ay)</code>、<code>(bx, by)</code>、<code>(ex, ey)</code> 和 <code>(dx, dy)</code>。這可能是 ROC 標誌中的一個幾何形狀，這樣的繪製操作可能用於定義標誌的外形。</p>
第二題<br/>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">void draw_roc_flag(gdImagePtr img); 
void draw_white_sun(gdImagePtr img, int x, int y, int size, int color); </pre>
<p>這兩個函數的原型（function prototype）被聲明，分別是 <code>draw_roc_flag</code> 和 <code>draw_white_sun</code>。</p>
<ol>
<li>
<p><code>void draw_roc_flag(gdImagePtr img);</code>：這是一個將在前面已經提到的 <code>gdImagePtr</code> 圖像上繪製 ROC 標誌的函數。具體的實現應該包含所有必要的程式碼，以便在給定的圖像上呈現 ROC 標誌的外觀。</p>
</li>
<li>
<p><code>void draw_white_sun(gdImagePtr img, int x, int y, int size, int color);</code>：這是一個函數，它可能用於在給定的圖像上繪製一個白色的太陽。該函數接受四個參數：</p>
<ul>
<li><code>gdImagePtr img</code>：表示要繪製的圖像。</li>
<li><code>int x</code> 和 <code>int y</code>：表示太陽的中心點座標。</li>
<li><code>int size</code>：表示太陽的大小。</li>
<li><code>int color</code>：表示太陽的顏色。</li>
</ul>
<p>這個函數的具體實現應該包含繪製白色太陽所需的程式碼。可能使用 <code>gdImageFilledEllipse</code> 或類似的函數來繪製填充的橢圓形狀，表示太陽。如果 <code>color</code> 參數被使用，它可以指定太陽的顏色。</p>
</li>
</ol>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">int main() { 
    // width 3: height 2 
    int width = 1200; 
    // 國旗長寬比為 3:2 
    int height = (int)(width*2.0 / 3.0); 
 
    gdImagePtr img = gdImageCreateTrueColor(width, height); 
    gdImageAlphaBlending(img, 0); 
 
    draw_roc_flag(img); 
 
    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb"); 
    if (outputFile == NULL) { 
        fprintf(stderr, "Error opening the output file.\n"); 
        return 1; 
    } 
    gdImagePngEx(img, outputFile, 9); 
    fclose(outputFile); 
    gdImageDestroy(img); 
    return 0; 
} </pre>
<p>這是一個完整的主程式，用於創建一個 <code>gdImage</code> 對象，繪製 ROC 標誌，然後將結果保存為 PNG 圖像文件。以下是程式碼的解釋：</p>
<ol>
<li>
<p><code>int width = 1200;</code> 和 <code>int height = (int)(width*2.0 / 3.0);</code>：這兩行設定了圖像的寬度和高度，符合 3:2 的國旗長寬比。</p>
</li>
<li>
<p><code>gdImagePtr img = gdImageCreateTrueColor(width, height);</code>：這行創建了一個 <code>gdImage</code> 對象，表示一個真彩色的圖像，寬度為 <code>width</code>，高度為 <code>height</code>。</p>
</li>
<li>
<p><code>gdImageAlphaBlending(img, 0);</code>：這行設定了圖像的 alpha 混合模式，禁用了透明度的混合。</p>
</li>
<li>
<p><code>draw_roc_flag(img);</code>：這行呼叫了 <code>draw_roc_flag</code> 函數，該函數應在圖像上繪製 ROC 標誌。</p>
</li>
<li>
<p><code>FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");</code>：這行打開了一個二進制寫入模式的文件，名為 "roc_flag_in_gd.png"，以便將繪製好的圖像保存為 PNG 文件。</p>
</li>
<li>
<p><code>if (outputFile == NULL) { ... }</code>：這行檢查文件是否成功打開。如果打開失敗，會輸出錯誤信息並結束程式。</p>
</li>
<li>
<p><code>gdImagePngEx(img, outputFile, 9);</code>：這行將圖像以 PNG 格式寫入到已經打開的文件中。數字 <code>9</code> 可能代表 PNG 圖像的壓縮級別，數字越大壓縮越高，範圍一般在 0 到 9 之間。</p>
</li>
<li>
<p><code>fclose(outputFile);</code>：這行關閉了文件，確保寫入操作完成。</p>
</li>
<li>
<p><code>gdImageDestroy(img);</code>：這行釋放了先前創建的圖像資源，防止內存洩漏。</p>
</li>
<li>
<p><code>return 0;</code>：程式執行成功，返回 0，表示沒有錯誤發生。</p>
</li>
</ol>
<p>這個程式碼的目的是創建一個具有特定長寬比的圖像，繪製 ROC 標誌，然後保存為 PNG 圖像。</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">void draw_roc_flag(gdImagePtr img) { 
    int width = gdImageSX(img); 
    int height = gdImageSY(img); 
    int red, white, blue; 
    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處 
    int center_x = (int)(width/4); 
    int center_y = (int)(height/4); 
    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖 
    // 由於中央白日圓形的半徑為青天寬度的 1/8 
    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8 
    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8 
    int sun_radius = (int)(width/8); 
    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑 
    int white_circle_dia = sun_radius; 
    // 中央藍色圓形半徑為中央白日的 1又 2/15 
    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15; 
    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值 
    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色 
    white = gdImageColorAllocate(img, 255, 255, 255); // 白色 
    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色 
    // 根據畫布大小塗上紅色長方形區域 
    gdImageFilledRectangle(img, 0, 0, width, height, red); 
    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色 
    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue); 
  {int x1 = 429; 
   int y1 = 125; 
   int x2 = 279; 
   int y2 = 165; 
 
   // 畫一條線連接兩個點 
   gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  {int x1 = 170; 
     int y1 = 274; 
     int x2 = 279; 
     int y2 = 165; 
 
     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } </pre>
<p>這段程式碼是 <code>draw_roc_flag</code> 函數的一部分，這個函數用來在 <code>gdImage</code> 對象上繪製 ROC 標誌。</p>
<ol>
<li>
<p><code>int x1 = 429; int y1 = 125; int x2 = 279; int y2 = 165;</code>：這四行定義了兩個點 <code>(x1, y1)</code> 和 <code>(x2, y2)</code> 的座標。</p>
</li>
<li>
<p><code>{int x1 = 429; int y1 = 125; int x2 = 279; int y2 = 165; gdImageLine(img, x1, y1, x2, y2, white);}</code>：這是一個區塊，用來畫一條以 <code>(x1, y1)</code> 和 <code>(x2, y2)</code> 為端點的白色線條。</p>
</li>
<li>
<p><code>{int x1 = 170; int y1 = 274; int x2 = 279; int y2 = 165; gdImageLine(img, x1, y1, x2, y2, white);}</code>：這是另一個區塊，用來畫另一條以 <code>(x1, y1)</code> 和 <code>(x2, y2)</code> 為端點的白色線條。</p>
</li>
</ol>
<p>這兩條線構成了 ROC 標誌中的兩個連接點，這可能是國旗上的一部分，用來繪製特定的圖案。整體而言，這個 <code>draw_roc_flag</code> 函數的目的是根據特定的規格在圖像上繪製 ROC 標誌。</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">{ 
    int x1 = 170; 
     int y1 = 274; 
     int x2 = 429; 
     int y2 = 125; 
 
     // 畫一條線連接兩個點 
     gdImageLine(img, x1, y1, x2, y2, white); 
  } 
  // 利用一個藍色大圓與白色小圓畫出藍色環狀 
  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue); 
  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white); 
 
 
  // 定義座標結構 
  typedef struct { 
      double x; 
      double y; 
  } Point; </pre>
<p>這是 <code>draw_roc_flag</code> 函數的另一部分，它繼續定義了座標結構 <code>Point</code>，並在圖像上進行了一些繪製操作。</p>
<ol>
<li>
<p><code>{int x1 = 170; int y1 = 274; int x2 = 429; int y2 = 125; gdImageLine(img, x1, y1, x2, y2, white);}</code>：這是一個區塊，用來畫一條以 <code>(x1, y1)</code> 和 <code>(x2, y2)</code> 為端點的白色線條。這段程式碼與前一段的兩條白色線條合併，構成 ROC 標誌的一部分。</p>
</li>
<li>
<p><code>gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);</code>：這行程式碼使用 <code>gdImageFilledEllipse</code> 函數，在圖像的 <code>(center_x, center_y)</code> 位置繪製一個藍色填充的橢圓，具有 <code>blue_circle_dia</code> 的直徑。</p>
</li>
<li>
<p><code>gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);</code>：這行程式碼使用 <code>gdImageFilledEllipse</code> 函數，在相同的位置 <code>(center_x, center_y)</code> 繪製一個白色填充的橢圓，直徑為 <code>white_circle_dia</code>。</p>
</li>
</ol>
<p>這兩個填充的橢圓可能表示 ROC 標誌中的藍色和白色圓形部分，其中心點 <code>(center_x, center_y)</code> 是先前計算的圖像中心點。這部分的繪製可能用於呈現 ROC 標誌的特定圖案。</p>
<ol start="4">
<li><code>typedef struct { double x; double y; } Point;</code>：這行程式碼定義了一個名為 <code>Point</code> 的結構體，其中包含 <code>x</code> 和 <code>y</code> 兩個成員，分別表示點的 x 和 y 座標。這種結構通常用於簡單表示二維平面上的一個點。</li>
</ol>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) { 
      // 直線斜率 
      double m = (y2 - y1) / (x2 - x1); 
 
      // 直線方程式中的常數項 
      double b = y1 - m * x1; 
 
      // 圓與直線交點的計算 
      double A = 1 + pow(m, 2); 
      double B = 2 * (m * b - m * k - h); 
      double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2); 
 
      // 判斷交點個數 
    double discriminant = pow(B, 2) - 4 * A * C; 
    if (discriminant &gt; 0) { 
        double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A); 
        double y_intersect1 = m * x_intersect1 + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect1, y_intersect1); 
 
        double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A); 
        double y_intersect2 = m * x_intersect2 + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect2, y_intersect2); 
    } else if (discriminant == 0) { 
        double x_intersect = -B / (2 * A); 
        double y_intersect = m * x_intersect + b; 
        printf("交點: (%.2f, %.2f)\n", x_intersect, y_intersect); 
    } else { 
        printf("No points.\n"); 
    } </pre>
<br/>
<p>這是一個計算圓與直線交點的函數 <code>circleLineIntersection</code>。這個函數使用了直線的斜率-截距形式和圓的一般方程，通過解二次方程來找到交點。</p>
<p>具體的解析過程如下：</p>
<ol>
<li>
<p><code>double m = (y2 - y1) / (x2 - x1);</code>：計算直線的斜率。</p>
</li>
<li>
<p><code>double b = y1 - m * x1;</code>：計算直線方程式中的常數項。</p>
</li>
<li>
<p><code>double A = 1 + pow(m, 2);</code>、<code>double B = 2 * (m * b - m * k - h);</code> 和 <code>double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);</code>：計算二次方程的係數。</p>
</li>
<li>
<p><code>double discriminant = pow(B, 2) - 4 * A * C;</code>：計算判別式。</p>
</li>
<li>
<p>如果判別式 <code>discriminant</code> 大於 0，表示有兩個交點，計算並輸出這兩個交點。</p>
</li>
<li>
<p>如果判別式 <code>discriminant</code> 等於 0，表示有一個交點，計算並輸出該交點。</p>
</li>
<li>
<p>如果判別式 <code>discriminant</code> 小於 0，表示沒有實數解，輸出 "No points"。</p>
</li>
</ol>
<p>這個函數用於計算圓心在 <code>(h, k)</code>，半徑為 <code>r</code> 的圓與通過 <code>(x1, y1)</code> 和 <code>(x2, y2)</code> 兩點的直線的交點。輸出的結果是根據實際情況而定，可以是兩個交點、一個交點，或者沒有實數解。</p>
<pre class="brush:csharp;auto-links:false;toolbar:false" contenteditable="false">} 
 

      // 圓的參數 
      double circle_x = (int)(width/4); // 圓心 x 座標 
      double circle_y = (int)(height/4); // 圓心 y 座標 
      double radius = white_circle_dia +  white_circle_dia*2/15;   // 圓半徑 
 
      // 兩點座標 
 
 
 
  double x3 = 170; 
  double y3 = 274; 
  double x4 = 279; 
  double y4 = 165; 
 
  circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3); 
 
 
  double x5 = 279; 
  double y5 = 165; 
  double x6 = 429; 
  double y6 = 125; 
 
  circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5); 
 
  }</pre>
<p>這段程式碼繼續在 <code>draw_roc_flag</code> 函數中計算圓與兩條直線的交點。</p>
<ol>
<li>
<p><code>double circle_x = (int)(width/4);</code> 和 <code>double circle_y = (int)(height/4);</code>：定義圓心的 x 和 y 座標，分別為圖像寬度的1/4和高度的1/4。</p>
</li>
<li>
<p><code>double radius = white_circle_dia + white_circle_dia*2/15;</code>：計算圓的半徑，即白色圓形的直徑加上1/15的直徑。</p>
</li>
<li>
<p><code>double x3 = 170; double y3 = 274; double x4 = 279; double y4 = 165;</code>：定義兩點的座標，這兩點是之前定義的直線的端點。</p>
</li>
<li>
<p><code>circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);</code>：呼叫 <code>circleLineIntersection</code> 函數，計算圓心在 <code>(circle_x, circle_y)</code>、半徑為 <code>radius</code> 的圓與通過 <code>(x4, y4)</code> 和 <code>(x3, y3)</code> 兩點的直線的交點。</p>
</li>
<li>
<p><code>double x5 = 279; double y5 = 165; double x6 = 429; double y6 = 125;</code>：定義另外兩點的座標。</p>
</li>
<li>
<p><code>circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);</code>：再次呼叫 <code>circleLineIntersection</code> 函數，計算圓心在 <code>(circle_x, circle_y)</code>、半徑為 <code>radius</code> 的圓與通過 <code>(x6, y6)</code> 和 <code>(x5, y5)</code> 兩點的直線的交點。</p>
</li>
</ol>
<p>這兩次呼叫 <code>circleLineIntersection</code> 函數的結果將輸出交點的座標，即兩條直線與圓的交點。這可能用於計算圓形環狀的一部分，根據計算的交點定義 ROC 標誌的形狀。</p>
<br/><br/><br/><br/><br/><br/></div><h1>期末總結</h1>
<p>我個人是覺得應該有60分，該做的我已經盡力去做了，如果不是有些同學問題太多，我的時間也不至於會被拖那麼多。也有持續補足自身所欠缺的知識儲備，希望能過。</p>
<p><strong>A: 是否按照進度明確標示倉儲的改版歷程。是，一定的。</strong></p>
<p><strong>B: 是否根據 IPv4 與 IPv6 網路環境設定進行作法討論。是，於w2~w3有影片。</strong></p>
<p><strong><span>C: 是否就 Replit、s.cycu.org 與 localhost 情境下對個人與分組倉儲進行設定操作。</span></strong></p>
<p><b>是，而且頗為麻煩，要是replit沒關我一定用它。</b></p>
<p><b><span>D: 是否完成</span><a href="https://mde.tw/cpnote/content/%E4%B8%8A%E8%AA%B2%E5%85%A7%E5%AE%B9.html">上課內容</a><span>中的 Exercises?是，但第九周上課裡所提到的歸納整理的程式我弄丟了...</span></b></p>
<p><b><span>E: 是否完成 <a href="https://mde.tw/cpnote/content/w2-w5.html">w2-w5</a><span><span> </span>週任務中的 Exercises。是，放在倉儲上了。</span></span></b></p>
<p><b><span><span>F: 是否完成 <a href="https://mde.tw/cpnote/content/w6-w7.html">w6-w7</a><span><span> </span>週任務中的練習一與練習二。有做出來放在個人網站。</span></span></span></b></p>
<p><b><span><span><span>G: 是否完成 C 結合 gd 繪圖程式庫, 畫出 <a href="https://en.wikipedia.org/wiki/Flag_of_China">PROC</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_China#/media/File:Flag_of_China_(construction_sheet).svg">規格</a><span>),<span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom">United Kingdom</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_the_United_Kingdom#/media/File:Flag_of_the_United_Kingdom_(1-2)_(construction_sheet).svg">規格</a><span>),<span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan">Japan</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_Japan#/media/File:Construction_sheet_of_the_Japanese_flag_EN.svg">規格</a><span>)與<span> </span></span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea">South Korea</a><span>(</span><a href="https://en.wikipedia.org/wiki/Flag_of_South_Korea#/media/File:Flag_of_South_Korea_(construction_sheet).svg">規格</a><span>) Flags。有做出來放在個人網站。</span></span></span></span></b></p>
<p><b><span><span><span><span>H: 是否完成 w16 Final Project。有做，但不確定正確。</span></span></span></span></b></p>
<p><b><span><span><span><span></span></span></span></span></b></p>